swagger: '2.0'
info:
  version: v1
  title: Chargify
  description: |-
    ## Welcome

    This is a place to put general notes and extra information, for internal use.

    To get started designing/documenting this API, select a version on the left. # Title
    No Description
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  <<api_key>>:
    type: basic
  Authorization:
    name: Authorization
    type: apiKey
    in: header
paths:
  '/subscriptions/{subscription_id}/adjustments.json':
    parameters:
      - name: subscription_id
        in: path
        description: The Subscription ID.
        required: true
        type: integer
    post:
      operationId: POST_subscriptions-subscription_id-adjustments-json
      summary: Create Adjustment
      tags:
        - Adjustment
        - Adjustments
      description: |-
        ## Adjustments Documentation 

        Full documentation on how to record Adjustments in the Chargify UI can be located [here](http://help.chargify.com/subscriptions/adjustments.html). It goes into greater detail on how the user interface will react when applying adjustments.


        ## Scenarios for adjustments

        | Scenario 1 | To create an Adjustment on a Subscription to increase the balance by a certain dollar amount, include the following to your request: | `"amount":"4.00"`                                            |
        |------------|--------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------|
        | Scenario 2 | To increase the Subscription balance by a certain amount of cents, use the following attribute in your request:                      | `"amount_in_cents":100`                                      |
        | Scenario 3 | To decrease the Subscription balance by a certain dollar amount, the request must contain:                                           | `"amount":"-4.00"`                                           |
        | Scenario 4 | To decrease the Subscription balance by a certain amount of cents, use:                                                              | `"amount_in_cents":"-400"`                                   |
        | Scenario 5 | To set the Subscription balance to an exact dollar amount, include the following attributes to the request:                          | `"adjustment_method":"target", "amount":"100.00"`            |
        | Scenario 6 | To set the Subscription balance to an exact positive amount of cents, the request must contain the following attributes:             | `"adjustment_method":"target",` `"amount_in_cents":"10000"`  |
        | Scenario 7 | To set the Subscription balance to an exact negative amount of cents, use the following attributes in the request:                   | `"adjustment_method":"target",` `"amount_in_cents":"-10000"` |
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/create-adjustment-request'
            example:
              adjustment:
                amount: '75'
                memo: Recording usage for May 2020
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/adjustment-response'
          examples:
            application/json:
              adjustment:
                amount: '75'
                memo: Recording usage for May 2020
        '404':
          description: ''
        '422':
          description: ''
          schema:
            type: object
            properties:
              errors:
                type: array
                enum:
                  - period_range_start must be a valid date.
                  - period_range_end can't be greater than 20 years from now.
                  - Performing this adjustment will take the balance negative.
                description: The error about a negative balance is only applicable to Relationship Invoicing sites.
                items:
                  type: string
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_subscriptions-subscriptionid-adjustmentsjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          statusCode: 201
  '/portal/customers/{customer_id}/enable.json':
    parameters:
      - name: customer_id
        in: path
        required: true
        type: integer
    post:
      operationId: POST_portal-customers-customer_id-enable-json
      summary: Enable Billing Portal for Customer
      tags:
        - Billing Portal
      description: |-
        ## Billing Portal Documentation

        Full documentation on how the Billing Portal operates within the Chargify UI can be located [here](https://help.chargify.com/billing-portal/introduction.html).

        This documentation is focused on how the to configure the Billing Portal Settings, as well as Subscriber Interaction and Merchant Management of the Billing Portal. 

        You can use this endpoint to enable Billing Portal access for a Customer, with the option of sending the Customer an Invitation email at the same time.

        ## Billing Portal Security

        If your customer has been invited to the Billing Portal, then they will receive a link to manage their subscription (the “Management URL”) automatically at the bottom of their statements, invoices, and receipts. **This link changes periodically for security and is only valid for 65 days.** 

        If you need to provide your customer their Management URL through other means, you can retrieve it via the API. Because the URL is cryptographically signed with a timestamp, it is not possible for merchants to generate the URL without requesting it from Chargify.

        In order to prevent abuse & overuse, we ask that you request a new URL only when absolutely necessary. Management URLs are good for 65 days, so you should re-use a previously generated one as much as possible. If you use the URL frequently (such as to display on your website), please **do not** make an API request to Chargify every time.
      parameters:
        - name: auto_invite
          in: query
          description: 'When set to 1, an Invitation email will be sent to the Customer. When set to 0, or not sent, an email will not be sent.'
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/enable-billing-portal-response'
        '422':
          description: ''
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: string
          examples:
            application/json:
              errors:
                - Portal is already enabled for this customer.
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_portal-customers-customerid-enablejson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/portal/customers/{customer_id}/management_link.json':
    parameters:
      - name: customer_id
        in: path
        description: The Customer ID.
        required: true
        type: integer
    get:
      operationId: GET_portal-customers-customer_id-management_link-format
      summary: Read Billing Portal Management Link
      tags:
        - Billing Portal
        - incomplete
      description: |-
        ## Read the Management Link

        This method will provide to the API user the exact URL required for a subscriber to access the Billing Portal.

        ## Rules for Management Link API

        + When retrieving a management URL, multiple requests for the same customer in a short period will return the **same** URL
        + We will not generate a new URL for 15 days
        + You must cache and remember this URL if you are going to need it again within 15 days
        + Only request a new URL after the `new_link_available_at` date
        + You are limited to 15 requests for the same URL. If you make more than 15 requests before `new_link_available_at`, you will be blocked from further Management URL requests (with a response code `429`)
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              url:
                type: string
              fetch_count:
                type: integer
              created_at:
                type: string
              new_link_available_at:
                type: string
              expires_at:
                type: string
              last_invite_sent_at:
                type:
                  - 'null'
                  - string
          examples:
            application/json:
              url: 'https://www.billingportal.com/manage/19804639/1517596469/bd16498719a7d3e6'
              fetch_count: 1
              created_at: '2018-02-02T18:34:29Z'
              new_link_available_at: '2018-02-17T18:34:29Z'
              expires_at: '2018-04-08T17:34:29Z'
              last_invite_sent_at: '2018-02-02T18:34:29Z'
        '422':
          description: ''
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: string
          examples:
            application/json:
              errors:
                - Billing Portal is not enabled for this customer.
        '429':
          description: ''
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  error:
                    type: string
          examples:
            application/json:
              errors:
                error: Too many requests for this customer's management link
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_portal-customers-customer_id-management_link-format
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          statusCode: 200
  '/portal/customers/{customer_id}/invitations/invite.json':
    parameters:
      - name: customer_id
        in: path
        required: true
        type: integer
    post:
      operationId: POST_portal-customers-customer_id-invitations-invite-json
      summary: Resend Billing Portal Invitation for Customer
      tags:
        - Billing Portal
      description: |-
        ## Resend Billing Portal Invitation for Customer

        You can resend a customer's Billing Portal invitation.

        If you attempt to resend an invitation 5 times within 30 minutes, you will receive a `422` response with `error` message in the body.

        If you attempt to resend an invitation when the Billing Portal is already disabled for a Customer, you will receive a `422` error response.

        If you attempt to resend an invitation when the Billing Portal is already disabled for a Customer, you will receive a `422` error response.

        If you attempt to resend an invitation when the Customer does not exist a Customer, you will receive a `404` error response.

        ## Limitations

        This endpoint will only return a JSON response.
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              last_sent_at:
                type: string
              last_accepted_at:
                type: string
              send_invite_link_text:
                type: string
              uninvited_count:
                type: number
          examples:
            application/json:
              last_sent_at: enim Duis esse dolore
              last_accepted_at: adipisicing magna do in irure
              send_invite_link_text: veniam sit
              uninvited_count: 66254678
        '404':
          description: ''
          schema:
            type: object
        '422':
          description: ''
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: string
          examples:
            application/json:
              errors:
                - 'Too many requests for this customer. You can perform 5 requests within 00:30:00.'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_portal-customers-customerid-invitations-invitejson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/portal/customers/{customer_id}/invitations/revoke.json':
    parameters:
      - name: customer_id
        in: path
        required: true
        type: integer
    delete:
      operationId: DELETE_portal-customers-customer_id-invitations-revoke-json
      summary: Revoke Billing Portal Invitation for Customer
      tags:
        - Billing Portal
      description: |-
        ## Revoke Billing Portal Invitation for Customer

        You can revoke a customer's Billing Portal invitation.

        If you attempt to revoke an invitation when the Billing Portal is already disabled for a Customer, you will receive a 422 error response.

        ## Limitations

        This endpoint will only return a JSON response.
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              last_sent_at:
                type: string
              last_accepted_at:
                type: string
              uninvited_count:
                type: integer
          examples:
            application/json:
              last_sent_at: Not Invited
              last_accepted_at: Invite Revoked
              uninvited_count: 8
        '422':
          description: ''
      security:
        - <<api_key>>: []
      x-stoplight:
        id: DELETE_portal-customers-customerid-invitations-revokejson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/product_families/{product_family_id}/{plural_kind}.json':
    parameters:
      - name: product_family_id
        in: path
        required: true
        type: integer
      - name: plural_kind
        in: path
        required: true
        type: string
        enum:
          - metered_components
          - quantity_based_components
          - on_off_components
          - prepaid_usage_components
    post:
      operationId: POST_product_families-product_family_id-plural_kind-json
      summary: Create Component
      tags:
        - Component
        - Components
      description: "## Create Component\n\nThis request will create a component definition under the specified product family. These component definitions determine what components are named, how they are measured, and how much they cost.\n\nComponents can then be added and “allocated” for each subscription to a product in the product family. These component line-items affect how much a subscription will be charged, depending on the current allocations (i.e. 4 IP Addresses, or SSL “enabled”)\n\nThis documentation covers both component definitions and component line-items. Please understand the difference.\n\nPlease note that you may not edit components via API. To do so, please log into the application.\n\n### Component Documentation\n\nFor more information on components, please see our documentation [here](https://help.chargify.com/products/product-components.html).\n\nFor information on how to record component usage against a subscription, please see the following resources:\n\n+ [Proration and Component Allocations](https://help.chargify.com/subscriptions/setting-component-allocations.html)\n+ [Recording component usage against a subscription](https://help.chargify.com/subscriptions/subscription-summary.html#components-line-items)\n\n## Plural Kind  \n\nIn order to create a component via API, a `plural_kind` is required. Plural kind is defined as the endpoint for the type of component you wish to create.\n\nUse one of the following:\n\n+ metered_components\n+ quantity_based_components\n+ on_off_components\n+ prepaid_usage_components\n\n## Metered Component Example\n\n```\n{\n  \"metered_component\": {\n    \"name\": \"Text messages\",\n    \"unit_name\": \"text message\",\n    \"taxable\": false,\n    \"pricing_scheme\": \"stairstep\",\n    \"prices\": [\n      {\n        \"starting_quantity\": 1,\n        \"unit_price\": 1,\n        \"component\": null\n      }\n    ]\n  }\n}\n```\n\n## Quantity Based Example\n\n**Per Unit Example**\n\n```\n{\n  \"quantity_based_component\": {\n    \"name\": \"Quantity Based Component\",\n    \"unit_name\": \"Component\",\n    \"description\": \"Example of JSON per-unit component example\",\n    \"pricing_scheme\": \"per_unit\",\n    \"unit_price\": \"10\",\n    \"taxable\": \"1\"\n    \"display_on_hosted_page\": \"1\",\n    \"allow_fractional_quantities\": \"1\",\n    \"public_signup_page_ids\": [\"323397\"]\n}\n```\n\n**Stairstep Example**\n\n```\n{\n  \"quantity_based_component\": {\n    \"name\": \"Quantity Based Component\",\n    \"unit_name\": \"Quantity Based Component\",\n    \"description\": \"Example of JSON stairstep example\",\n    \"pricing_scheme\": \"stairstep\",\n    \"taxable\": \"1\",\n    \"prices_attributes\": \n      [\n        {\n          \"starting_quantity\": \"1\",\n          \"ending_quantity\": \"100\",\n          \"unit_price\": \"50\"\n        },\n        {\n          \"starting_quantity\": \"101\",\n          \"ending_quantity\": \"200\",\n          \"unit_price\": \"10\"\n        }\n      ],\n    \"display_on_hosted_page\": \"1\",\n    \"allow_fractional_quantities\": \"1\",\n    \"public_signup_page_ids\": [\"323397\"]\n  }\n}\n```\n\n**Volume Example**\n\n```\n{\n  \"quantity_based_component\": {\n    \"name\": \"Quantity Based Component\",\n    \"unit_name\": \"Quantity Based Component\",\n    \"description\": \"Example of JSON volume component example\",\n    \"pricing_scheme\": \"volume\",\n    \"taxable\": \"1\",\n    \"prices_attributes\": [\n      {\n        \"starting_quantity\": \"1\",\n        \"ending_quantity\": \"10\",\n        \"unit_price\": \"10\"\n      },\n      {\n        \"starting_quantity\": \"11\",\n        \"ending_quantity\": \"20\",\n        \"unit_price\": \"5\"\n      }\n    ],\n    \"display_on_hosted_page\": \"1\",\n    \"allow_fractional_quantities\": \"1\",\n    \"public_signup_page_ids\": [\"323397\"]\n  }\n}\n```\n\n**Tiered Example**\n\n```\n{\n  \"quantity_based_component\": {\n    \"name\": \"Quantity Based Component\",\n    \"unit_name\": \"Quantity Based Component\",\n    \"description\": \"Example of JSON for tiered quantity based component\",\n    \"taxable\": \"1\",\n    \"pricing_scheme\": \"tiered\",\n    \"prices_attributes\": [\n      {\n        \"starting_quantity\": \"1\",\n        \"ending_quantity\": \"20\",\n        \"unit_price\": \"50\"\n      },\n      {\n        \"starting_quantity\": \"21\",\n        \"ending_quantity\": \"40\",\n        \"unit_price\": \"25\"\n      }\n    ],\n    \"display_on_hosted_page\": \"1\",\n    \"allow_fractional_quantities\": \"1\",\n    \"public_signup_page_ids\": [\"323397\"]\n  }\n}\n```\n\n\n## On/Off Component\n\n```\n{\n  \"on_off_component\": {\n    \"name\": \"Annual Support Services\",\n    \"description\": \"Prepay for support services\",\n    \"taxable\": \"1\",\n    \"price_attributes\": {\n      \"unit_price\": \"100.00\",\n      \"starting_quantity\": \"0\"\n    },\n    \"display_on_hosted_page\": \"1\",\n    \"public_signup_page_ids\": [\"320495\"]\n}\n```\n\n## Create a Component with Default Proration Schemes\n\nThis endpoint will allow you to create a component within Chargify with default proration schemes. The example in the definition will allow you to create a component for a quantity-based component.\n\n### On/Off Component with Default Proration Schemes\n\n```\n{\n  \"on_off_component\": {\n    \"name\": \"Annual Support Services\",\n    \"description\": \"Prepay for support services\",\n    \"taxable\": \"1\",\n    \"price_attributes\": {\n      \"unit_price\": \"100.00\",\n      \"starting_quantity\": \"0\"\n    },\n    \"display_on_hosted_page\": \"1\",\n    \"public_signup_page_ids\": [\"320495\"],\n    \"upgrade_charge\": \"full\",\n    \"downgrade_credit\": \"prorated\",\n  }\n}\n```\n\n## Prepaid Usage Component Example\n\n```\n{\n   \"prepaid_usage_component\":{\n      \"name\":\"Minutes\",\n      \"unit_name\":\"minutes\",\n      \"unit_price\":2.0,\n      \"pricing_scheme\":\"per_unit\",\n      \"rollover_prepaid_remainder\": true,\n      \"renew_prepaid_allocation\": true,\n      \"expiration_interval\": 15,\n      \"expiration_interval_unit\": \"day\",\n      \"overage_pricing\":{\n         \"pricing_scheme\":\"stairstep\",\n         \"prices\":[\n            {\n               \"starting_quantity\":1,\n               \"ending_quantity\":100,\n               \"unit_price\":3.0,\n               \"formatted_unit_price\":\"$3.00\"\n            },\n            {\n               \"starting_quantity\":101,\n               \"unit_price\":5.0,\n               \"formatted_unit_price\":\"$5.00\"\n            }\n         ]\n      }\n   }\n}\n```\n\n\n## On/Off Component with Price Points\n\n```\n{\n\t\"on_off_component\": {\n\t\t\"name\": \"Annual Support Services\",\n\t\t\"description\": \"Prepay for support services\",\n\t\t\"taxable\": \"1\",\n\t\t\"pricing_scheme\": \"per_unit\",\n\t\t\"price_attributes\": {\n\t\t\t\"unit_price\": \"100.00\",\n\t\t\t\"starting_quantity\": \"0\"\n\t\t},\n\t\t\"display_on_hosted_page\": \"1\",\n\t\t\"public_signup_page_ids\": [\"320495\"],\n\t\t\"price_points\": [{\n\t\t\t\"name\": \"Wholesale\",\n\t\t\t\"handle\": \"wholesale-handle\",\n\t\t\t\"pricing_scheme\": \"per_unit\",\n\t\t\t\"prices\": [{\n\t\t\t\t\"starting_quantity\": \"0\",\n\t\t\t\t\"unit_price\": \"89.00\"\n\t\t\t}]\n\t\t}]\n\t}\n}\n```"
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/create-component'
            example:
              metered_component:
                name: Text messages
                unit_name: text message
                taxable: false
                pricing_scheme: stairstep
                prices:
                  - starting_quantity: 1
                    unit_price: 1
                    component: null
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/component'
          examples:
            application/json:
              component:
                id: 292609
                name: Text messages
                pricing_scheme: stairstep
                unit_name: text message
                unit_price: null
                product_family_id: 528484
                price_per_unit_in_cents: null
                kind: metered_component
                archived: false
                taxable: false
                description: null
                created_at: '2019-08-02T05:54:53-04:00'
                prices:
                  - id: 47
                    component_id: 292609
                    starting_quantity: 1
                    ending_quantity: null
                    unit_price: '1.0'
                    price_point_id: 173
                    formatted_unit_price: $1.00
                default_price_point_name: Original
        '422':
          description: ''
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: string
          examples:
            application/json:
              errors:
                - 'Name: cannot be blank.'
                - 'Unit name: cannot be blank.'
                - 'Pricing scheme: cannot be blank.'
                - At least 1 price bracket must be defined
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_productfamilies-productfamilyid-pluralkindjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /components/lookup.json:
    get:
      operationId: GET_components-lookup-json
      summary: Read Component
      tags:
        - Component
        - Components
      description: |-
        ## Read Component by Handle

        This request will return information regarding a component having the handle you provide. You can identify your components with a handle so you don't have to save or reference the IDs we generate.
      parameters:
        - name: handle
          in: query
          description: The handle of the component you wish to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/component'
          examples:
            application/json:
              component:
                id: 399853
                name: Annual Support Services
                pricing_scheme: null
                unit_name: on/off
                unit_price: '100.0'
                product_family_id: 997233
                price_per_unit_in_cents: null
                kind: on_off_component
                archived: false
                taxable: true
                description: Prepay for support services
                default_price_point_id: 121003
                price_point_count: 4
                price_points_url: 'https://general-goods.chargify.com/components/399853/price_points'
                tax_code: D0000000
                recurring: true
                upgrade_charge: null
                downgrade_credit: null
                created_at: '2019-08-02T05:54:53-04:00'
                default_price_point_name: Original
                product_family_name: Chargify
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_components-lookupjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/product_families/{product_family_id}/components/{component_id}.json':
    parameters:
      - name: product_family_id
        in: path
        required: true
        type: integer
      - name: component_id
        in: path
        description: 'A component identifier.  Either a Chargify ID or the handle you have attached to the component, prefixed with "handle:"'
        required: true
        type: integer
        pattern: '\Ahandle:[a-z0-9][a-z0-9\-_:]*\z/'
    get:
      operationId: GET_product_families-product_family_id-components-component_id-json
      summary: Read Component by Id
      tags:
        - Component
        - Components
      description: |-
        ## Read a Specific Component for a Product Family

        This request will return information regarding a component from a specific product family.
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/component'
          examples:
            application/json: |-
              {
                  "component": {
                      "id": 399853,
                      "name": "Annual Support Services",
                      "pricing_scheme": null,
                      "unit_name": "on/off",
                      "unit_price": "100.0",
                      "product_family_id": 997233,
                      "price_per_unit_in_cents": null,
                      "kind": "on_off_component",
                      "archived": false,
                      "taxable": true,
                      "description": "Prepay for support services",
                      "default_price_point_id": 121003,
                      "price_point_count": 4,
                      "price_points_url": "https://general-goods.chargify.com/components/399853/price_points",
                      "tax_code": "D0000000",
                      "recurring": true,
                      "upgrade_charge": null,
                      "downgrade_credit": null,
                      "created_at": "2019-08-02T05:54:53-04:00",
                      "default_price_point_name": "Original",
                      "product_family_name": "Chargify
                  }
              }
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_productfamilies-productfamilyid-components-componentidjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/product_families/{product_family_id}/components/handle:{component_handle}.json':
    parameters:
      - name: product_family_id
        in: path
        required: true
        type: integer
      - name: component_handle
        in: path
        required: true
        type: string
    get:
      operationId: 'GET_product_families-product_family_id-components-handle:component_handle-json'
      summary: Read Component by Handle
      tags:
        - Component
        - Components
      description: |-
        ## Read a Specific Component for a Product Family

        This request will return information regarding a component from a specific product family.  You can now pass either an integer as the `component_id` or the component handle as a string prefixed by `handle:`

        ### Simplified example using component_id as handle:<string>

        ```
        curl mysub.chargify.com/product_families/999/components/handle:foo
        ```

        ### Simplified example using component_id as integer

        ```
        curl mysub.chargify.com/product_families/999/components/999
        ```

        both examples assume component with id 999 has handle 'foo'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/component'
          examples:
            application/json:
              component:
                id: 24
                name: 24/7 Support
                handle: my-handle
                pricing_scheme: null
                unit_name: on/off
                unit_price: '1.0'
                product_family_id: 4
                price_per_unit_in_cents: null
                kind: on_off_component
                archived: false
                taxable: false
                description: null
                default_price_point_id: 104
                price_point_count: 1
                price_points_url: 'http://acme.chargify.test/components/24/price_points'
                tax_code: null
                recurring: true
                upgrade_charge: null
                downgrade_credit: null
                created_at: '2019-08-02T05:54:53-04:00'
                default_price_point_name: Original
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_productfamilies-productfamilyid-components-handlecomponenthandlejson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: true
          dynamic: false
          statusCode: 200
  /components.json:
    get:
      operationId: GET_components-json
      summary: Read Components for Site
      tags:
        - incomplete
        - Component
        - Components
      description: |-
        ## Read Components for a Site

        This request will return a list of components for a site.
      parameters:
        - $ref: '#/parameters/trait:componentQueryString:date_field'
        - $ref: '#/parameters/trait:componentQueryString:start_date'
        - $ref: '#/parameters/trait:componentQueryString:end_date'
        - $ref: '#/parameters/trait:componentQueryString:start_datetime'
        - $ref: '#/parameters/trait:componentQueryString:end_datetime'
        - $ref: '#/parameters/trait:includesArchive:include_archived'
        - $ref: '#/parameters/trait:pagination20:page'
        - $ref: '#/parameters/trait:pagination20:per_page'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/component'
          examples:
            application/json:
              - component:
                  id: 399850
                  name: $1.00 component
                  pricing_scheme: per_unit
                  unit_name: Component
                  unit_price: '1.0'
                  product_family_id: 997233
                  price_per_unit_in_cents: null
                  kind: quantity_based_component
                  archived: false
                  taxable: false
                  description: Component
                  default_price_point_id: 121000
                  prices:
                    - id: 630687
                      component_id: 399850
                      starting_quantity: 1
                      ending_quantity: null
                      unit_price: '1.0'
                      price_point_id: 121000
                      formatted_unit_price: $1.00
                  price_point_count: 2
                  price_points_url: 'https://general-goods.chargify.com/components/399850/price_points'
                  tax_code: null
                  recurring: true
                  upgrade_charge: null
                  downgrade_credit: null
                  created_at: '2019-08-01T09:35:38-04:00'
                  default_price_point_name: Original
                  product_family_name: Chargify
              - component:
                  id: 399853
                  name: Annual Support Services
                  pricing_scheme: null
                  unit_name: on/off
                  unit_price: '100.0'
                  product_family_id: 997233
                  price_per_unit_in_cents: null
                  kind: on_off_component
                  archived: false
                  taxable: true
                  description: Prepay for support services
                  default_price_point_id: 121003
                  price_point_count: 4
                  price_points_url: 'https://general-goods.chargify.com/components/399853/price_points'
                  tax_code: D0000000
                  recurring: true
                  upgrade_charge: null
                  downgrade_credit: null
                  created_at: '2019-08-01T09:35:37-04:00'
                  default_price_point_name: Original
                  product_family_name: Chargify
              - component:
                  id: 386937
                  name: Cancellation fee
                  pricing_scheme: null
                  unit_name: on/off
                  unit_price: '35.0'
                  product_family_id: 997233
                  price_per_unit_in_cents: null
                  kind: on_off_component
                  archived: false
                  taxable: false
                  description: ''
                  default_price_point_id: 108307
                  price_point_count: 1
                  price_points_url: 'https://general-goods.chargify.com/components/386937/price_points'
                  tax_code: null
                  recurring: true
                  upgrade_charge: null
                  downgrade_credit: null
                  created_at: '2019-08-01T09:35:38-04:00'
                  default_price_point_name: Original
                  product_family_name: Chargify
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_componentsjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/components/{component_id}/price_points/{price_point_id}/default.json':
    parameters:
      - name: component_id
        in: path
        required: true
        type: string
      - name: price_point_id
        in: path
        required: true
        type: string
    put:
      operationId: PUT_components-component_id-price_points-price_point_id-default-json
      summary: Promoting Price Point to Default
      tags:
        - Components
      description: |-
        Sets a new default price point for the component. This new default will apply to all new subscriptions going forward - existing subscriptions will remain on their current price point.

        See [Price Points Documentation](https://help.chargify.com/products/product-components.html#price-points) for more information on price points and moving subscriptions between price points.
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/components-create-response-post'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: PUT_components-componentid-pricepoints-pricepointid-defaultjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/product_families/{product_family_id}/components.json':
    parameters:
      - name: product_family_id
        in: path
        required: true
        type: integer
    get:
      operationId: GET_product_families-product_family_id-components-json
      summary: List Components for Product Family
      tags:
        - incomplete
        - Component
        - Components
      description: |-
        ## Read Components for a Product Family

        This request will return a list of components for a particular product family.
      parameters:
        - $ref: '#/parameters/trait:includesArchive:include_archived'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/component'
          examples:
            application/json:
              - component:
                  id: 399850
                  name: $1.00 component
                  pricing_scheme: per_unit
                  unit_name: Component
                  unit_price: '1.0'
                  product_family_id: 997233
                  price_per_unit_in_cents: null
                  kind: quantity_based_component
                  archived: false
                  taxable: false
                  description: Component
                  default_price_point_id: 121000
                  prices:
                    - id: 630687
                      component_id: 399850
                      starting_quantity: 1
                      ending_quantity: null
                      unit_price: '1.0'
                      price_point_id: 121000
                      formatted_unit_price: $1.00
                  price_point_count: 2
                  price_points_url: 'https://general-goods.chargify.com/components/399850/price_points'
                  tax_code: null
                  recurring: true
                  upgrade_charge: null
                  downgrade_credit: null
                  created_at: '2019-08-01T09:35:38-04:00'
                  default_price_point_name: Original
                  product_family_name: Chargify
              - component:
                  id: 399853
                  name: Annual Support Services
                  pricing_scheme: null
                  unit_name: on/off
                  unit_price: '100.0'
                  product_family_id: 997233
                  price_per_unit_in_cents: null
                  kind: on_off_component
                  archived: false
                  taxable: true
                  description: Prepay for support services
                  default_price_point_id: 121003
                  price_point_count: 4
                  price_points_url: 'https://general-goods.chargify.com/components/399853/price_points'
                  tax_code: D0000000
                  recurring: true
                  upgrade_charge: null
                  downgrade_credit: null
                  created_at: '2019-08-01T09:35:37-04:00'
                  default_price_point_name: Original
                  product_family_name: Chargify
              - component:
                  id: 386937
                  name: Cancellation fee
                  pricing_scheme: null
                  unit_name: on/off
                  unit_price: '35.0'
                  product_family_id: 997233
                  price_per_unit_in_cents: null
                  kind: on_off_component
                  archived: false
                  taxable: false
                  description: ''
                  default_price_point_id: 108307
                  price_point_count: 1
                  price_points_url: 'https://general-goods.chargify.com/components/386937/price_points'
                  tax_code: null
                  recurring: true
                  upgrade_charge: null
                  downgrade_credit: null
                  created_at: '2019-08-01T09:35:38-04:00'
                  default_price_point_name: Original
                  product_family_name: Chargify
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_productfamilies-productfamilyid-componentsjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/components/{component_id}/price_points.json':
    parameters:
      - name: component_id
        in: path
        required: true
        type: string
    post:
      operationId: POST_components-component_id-price_points-json
      summary: Create Price Point
      tags:
        - Components
      description: |-
        ## Create a Component Price Point

        This endpoint can be used to create a new price point for an existing component.

        ## Example for Prepaid Usage Component

        Creating a price point for a prepaid usage component works similarly to creating a price point for any other type of component except that the `overage_pricing` object is **required**. This object must include the relevant overage pricing details (`pricing_scheme` and `prices`) for the price point being created.

        In addition, parameters can be sent to control prepaid-specific behavior such as allocation renewal, rollover of unused units and expiration dates.

        ```
        {
          "price_point": {
            "name": "MSRP",
            "handle": "msrp",
            "pricing_scheme": "stairstep",
            "renew_prepaid_allocation": false,
            "rollover_prepaid_remainder": true,
            "expiration_interval": 2,
            "expiration_interval_unit": "month",
            "prices": [
              {
                "starting_quantity": 1,
                "ending_quantity": 100,
                "unit_price": 5
              },
              {
                "starting_quantity": 101,
                "unit_price": 4
              }
            ],
            "overage_pricing": {
              "pricing_scheme": "stairstep",
              "prices": [
                {
                  "starting_quantity": 1,
                  "ending_quantity": 100,
                  "unit_price": 4,
                  "formatted_unit_price": "$4.00"
                }
              ]
            }
          }
        }```
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/components-price-points-create-price-point-request'
            example:
              price_point:
                name: Wholesale
                handle: wholesale-handle
                pricing_scheme: stairstep
                prices:
                  - starting_quantity: '1'
                    ending_quantity: '100'
                    unit_price: '5.00'
                  - starting_quantity: '101'
                    unit_price: '4.00'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/components-price-points-create-price-point-response'
          examples:
            application/json:
              price_point:
                id: 79
                default: false
                name: Wholesale
                pricing_scheme: stairstep
                component_id: 74
                handle: wholesale-handle
                archived_at: null
                created_at: '2017-07-05T13:44:30-04:00'
                updated_at: '2017-07-05T13:44:30-04:00'
                prices:
                  - id: 119
                    component_id: 74
                    starting_quantity: 1
                    ending_quantity: 100
                    unit_price: '5.0'
                  - id: 120
                    component_id: 74
                    starting_quantity: 101
                    ending_quantity: null
                    unit_price: '4.0'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_components-componentid-pricepointsjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    get:
      operationId: GET_components-component_id-price_points-json
      summary: Read Price Points
      tags:
        - Components
      description: |-
        ## Read Price Points

        Use this endpoint to read current price points that are associated with a component.

        You may specify the component by using either the numeric id or the `handle:gold` syntax.

        When fetching a component's price points, if you have defined multiple currencies at the site level, you can optionally pass the `?currency_prices=true` query param to include an array of currency price data in the response.

        If the price point is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/components-price-points-list-price-points-response'
          examples:
            application/json:
              price_points:
                - id: 80
                  default: false
                  name: Wholesale Two
                  pricing_scheme: per_unit
                  component_id: 74
                  handle: wholesale-two
                  archived_at: null
                  created_at: '2017-07-05T13:55:40-04:00'
                  updated_at: '2017-07-05T13:55:40-04:00'
                  prices:
                    - id: 121
                      component_id: 74
                      starting_quantity: 1
                      ending_quantity: null
                      unit_price: '5.0'
                - id: 81
                  default: false
                  name: MSRP
                  pricing_scheme: per_unit
                  component_id: 74
                  handle: msrp
                  archived_at: null
                  created_at: '2017-07-05T13:55:40-04:00'
                  updated_at: '2017-07-05T13:55:40-04:00'
                  prices:
                    - id: 122
                      component_id: 74
                      starting_quantity: 1
                      ending_quantity: null
                      unit_price: '4.0'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_components-componentid-pricepointsjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/price_points/{price_point_id}/currency_prices.json':
    parameters:
      - name: price_point_id
        in: path
        required: true
        type: string
    put:
      operationId: PUT_price_points-price_point_id-currency_prices-json
      summary: Update Currency Prices
      tags:
        - Components
      description: This endpoint allows you to update currency prices for a given currency that has been defined on the site level in your settings.
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              currency_prices:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: ID of the currency price record being updated.
                    price:
                      type: integer
                      description: New price for the given currency.
                  required:
                    - id
                    - price
            required:
              - currency_prices
            example:
              currency_prices:
                - id: 100
                  price: 51
                - id: 101
                  price: 41
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/price-point-currency-price'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: PUT_pricepoints-pricepointid-currencypricesjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    post:
      operationId: POST_price_points-price_point_id-currency_prices-json
      summary: Create Currency Prices
      tags:
        - Components
      description: |-
        This endpoint allows you to create currency prices for a given currency that has been defined on the site level in your settings.

        When creating currency prices, they need to mirror the structure of your primary pricing. For each price level defined on the component price point, there should be a matching price level created in the given currency.
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              currency_prices:
                type: array
                items:
                  type: object
                  properties:
                    currency:
                      type: string
                      description: ISO code for a currency defined on the site level.
                    price:
                      type: integer
                      description: Price for the price level in this currency.
                    price_id:
                      type: integer
                      description: ID of the price that this corresponds with.
                  required:
                    - currency
                    - price
                    - price_id
            required:
              - currency_prices
            example:
              currency_prices:
                - currency: EUR
                  price: 50
                  price_id: 20
                - currency: EUR
                  price: 40
                  price_id: 21
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/price-point-currency-price'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_pricepoints-pricepointid-currencypricesjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/components/{component_id}/price_points/bulk.json':
    parameters:
      - name: component_id
        in: path
        required: true
        type: string
    post:
      operationId: POST_components-component_id-price_points-bulk-json
      summary: Create Bulk Price Points
      tags:
        - Components
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/components-price-points-bulk-create-price-points-request'
            example:
              price_points:
                - name: Wholesale
                  handle: wholesale
                  pricing_scheme: per_unit
                  prices:
                    - starting_quantity: 1
                      unit_price: 5
                - name: MSRP
                  handle: msrp
                  pricing_scheme: per_unit
                  prices:
                    - starting_quantity: 1
                      unit_price: 4
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/components-price-points-list-price-points-response'
          examples:
            application/json:
              price_points:
                - id: 80
                  default: false
                  name: Wholesale Two
                  pricing_scheme: per_unit
                  component_id: 74
                  handle: wholesale-two
                  archived_at: null
                  created_at: '2017-07-05T13:55:40-04:00'
                  updated_at: '2017-07-05T13:55:40-04:00'
                  prices:
                    - id: 121
                      component_id: 74
                      starting_quantity: 1
                      ending_quantity: null
                      unit_price: '5.0'
                - id: 81
                  default: false
                  name: MSRP
                  pricing_scheme: per_unit
                  component_id: 74
                  handle: msrp
                  archived_at: null
                  created_at: '2017-07-05T13:55:40-04:00'
                  updated_at: '2017-07-05T13:55:40-04:00'
                  prices:
                    - id: 122
                      component_id: 74
                      starting_quantity: 1
                      ending_quantity: null
                      unit_price: '4.0'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_components-componentid-pricepoints-bulkjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/components/{component_id}/price_points/{price_point_id}.json':
    parameters:
      - name: component_id
        in: path
        required: true
        type: string
      - name: price_point_id
        in: path
        required: true
        type: string
    put:
      operationId: PUT_components-component_id-price_points-price_point_id-json
      summary: Update Price Point
      tags:
        - Components
      description: |-
        When updating a price point, it's prices can be updated as well by creating new prices or editing / removing existing ones.

        Passing in a price bracket without an `id` will attempt to create a new price. 

        Including an `id` will update the corresponding price, and including the `_destroy` flag set to true along with the `id` will remove that price.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/components-price-points-update-price-point-request'
            example:
              price_point:
                name: Default
                prices:
                  - id: 1
                    ending_quantity: 100
                    unit_price: 5
                  - id: 2
                    _destroy: 'true'
                  - starting_quantity: 101
                    unit_price: 4
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/components-price-points-create-price-point-response'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: PUT_components-componentid-pricepoints-pricepointidjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/components/{component_id}/price_points/{price_point_id}.{format}':
    parameters:
      - name: component_id
        in: path
        required: true
        type: string
      - name: price_point_id
        in: path
        required: true
        type: string
      - name: format
        in: path
        required: true
        type: string
    delete:
      operationId: DELETE_components-component_id-price_points-price_point_id-format
      summary: Archive Price Point
      tags:
        - Components
      description: A price point can be archived at any time. Subscriptions using a price point that has been archived will continue using it until they're moved to another price point.
      responses:
        '201':
          description: ''
          schema:
            type: object
            properties:
              price_point:
                type: object
                properties:
                  id:
                    type: integer
                  default:
                    type: boolean
                  name:
                    type: string
                  pricing_scheme:
                    type: string
                  component_id:
                    type: integer
                  handle:
                    type: string
                  archived_at:
                    type: string
                  created_at:
                    type: string
                  updated_at:
                    type: string
                  prices:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        component_id:
                          type: integer
                        starting_quantity:
                          type: integer
                        ending_quantity:
                          type:
                            - integer
                            - 'null'
                        unit_price:
                          type: string
          examples:
            application/json:
              price_point:
                id: 79
                default: false
                name: Wholesale
                pricing_scheme: stairstep
                component_id: 74
                handle: wholesale-handle
                archived_at: '2017-07-06T15:04:00-04:00'
                created_at: '2017-07-05T13:44:30-04:00'
                updated_at: '2017-07-05T13:44:30-04:00'
                prices:
                  - id: 119
                    component_id: 74
                    starting_quantity: 1
                    ending_quantity: 100
                    unit_price: '5.0'
                  - id: 120
                    component_id: 74
                    starting_quantity: 101
                    ending_quantity: null
                    unit_price: '4.0'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: DELETE_components-componentid-pricepoints-pricepointidformat
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/components/{component_id}/price_points/{price_point_id}/unarchive.json':
    parameters:
      - name: component_id
        in: path
        required: true
        type: string
      - name: price_point_id
        in: path
        required: true
        type: string
    put:
      operationId: PUT_components-component_id-price_points-price_point_id-unarchive-json
      summary: Unarchive Price Point
      tags:
        - Components
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/components-price-points-create-price-point-response'
          examples:
            application/json:
              price_point:
                id: 79
                default: false
                name: Wholesale
                pricing_scheme: stairstep
                component_id: 74
                handle: wholesale-handle
                archived_at: null
                created_at: '2017-07-05T13:44:30-04:00'
                updated_at: '2017-07-05T13:44:30-04:00'
                prices:
                  - id: 119
                    component_id: 74
                    starting_quantity: 1
                    ending_quantity: 100
                    unit_price: '5.0'
                  - id: 120
                    component_id: 74
                    starting_quantity: 101
                    ending_quantity: null
                    unit_price: '4.0'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: PUT_components-componentid-pricepoints-pricepointid-unarchivejson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/subscriptions/{subscription_id}/components/{component_id}.json':
    parameters:
      - name: subscription_id
        in: path
        description: The ID of the Subscription from which you want to get a listing of applied Components.
        required: true
        type: integer
      - name: component_id
        in: path
        description: 'The ID of the Component you want to retrieve information about. Alternatively, the component''s handle prefixed by "handle:"'
        required: true
        type: integer
    get:
      operationId: GET_subscriptions-subscription_id-components-component_id-json
      summary: Read Component for Subscription
      tags:
        - Component
        - Subscriptions Components
      description: |-
        ## Read Component for Subscription

        This request will list information regarding a specific component owned by a subscription.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/subscriptions-component'
          examples:
            application/json:
              component:
                component_id: 193028
                subscription_id: 14593192
                allocated_quantity: 1
                pricing_scheme: per_unit
                name: Users
                kind: quantity_based_component
                unit_name: Users
        '404':
          description: Not Found
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_subscriptions-subscriptionid-components-componentidjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          statusCode: 200
  '/subscriptions/{subscription_id}/components.json':
    parameters:
      - name: subscription_id
        in: path
        description: The ID of the Subscription from which you want to get a listing of applied Components.
        required: true
        type: integer
    get:
      operationId: GET_subscriptions-subscription_id-components-format
      summary: List Components for a Subscription
      tags:
        - Component
        - Subscriptions Components
      description: |-
        ## Read Components for a Subscription

        This request will list a subscription's applied components.

        ## Archived Components

        When requesting to list components for a given subscription, if the subscription contains **archived** components they will be listed in the server response.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/list-subscriptions-components'
          examples:
            application/json:
              - {}
              - component:
                  unit_name: Text messages
                  name: text_messages
                  kind: metered_component
                  component_id: 98322708341
                  subscription_id: 38855254509
                  allocated_quantity: 1500
                  unit_balance: 5000
              - component:
                  enabled: true
                  subscription_id: 30336331837
                  unit_balance: 5000
                  name: text messages
              - {}
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_subscriptions-subscription_id-components-format
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: true
          statusCode: 200
  '/subscriptions/{subscription_id}/price_points.json':
    parameters:
      - name: subscription_id
        in: path
        required: true
        type: string
    post:
      operationId: POST_subscriptions-subscription_id-price_points-json
      summary: Bulk Update a Subscription's Component's Price Points
      tags:
        - Subscriptions Components
      description: |-
        ## Bulk Update a Subscription's Component's Price Points

        Updates the price points on one or more of a subscription's components.

        The `price_point` key can take either a:
        1. Price point id (integer)
        2. Price point handle (string)
        3. `"_default"` string, which will reset the price point to the component's current default price point.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/components-price-points-bulk-update-a-subscriptions-components-price-points'
            example:
              components:
                - component_id: 997
                  price_point: 1022
                - component_id: 998
                  price_point: wholesale-handle
                - component_id: 999
                  price_point: _default
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/components-price-points-bulk-update-a-subscriptions-components-price-points'
          examples:
            application/json:
              components:
                - component_id: 997
                  price_point: 1022
                - component_id: 998
                  price_point: wholesale-handle
                - component_id: 999
                  price_point: _default
        '422':
          description: ''
          schema:
            type: array
            items:
              type: object
              properties:
                component_id:
                  type: integer
                price_point:
                  type:
                    - integer
                    - string
                message:
                  type: string
          examples:
            application/json:
              - component_id: 997
                price_point: 10023
                message: Price Point does not belong to Component
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_subscriptions-subscriptionid-pricepointsjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/subscriptions/{subscription_id}/price_points/reset.json':
    parameters:
      - name: subscription_id
        in: path
        required: true
        type: string
    post:
      operationId: POST_subscriptions-subscription_id-price_points-reset-json
      summary: Bulk Reset a Subscription's Component's Price Points
      tags:
        - Subscriptions Components
      description: |-
        Resets all of a subscription's components to use the current default.

        **Note**: this will update the price point for all of the subscription's components, even ones that have not been allocated yet.
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/components-price-points-bulk-reset-a-subscriptions-components-price-points'
          examples:
            application/json:
              subscription:
                id: -80293620
                state: mollit exercitation ipsum
                trial_started_at: null
                trial_ended_at: null
                activated_at: nostrud nulla et
                created_at: qui L
                updated_at: in veniam aute in
                expires_at: null
                balance_in_cents: 50504234
                current_period_ends_at: Lorem anim eu
                next_assessment_at: adipisicing ullamco
                canceled_at: null
                cancellation_message: mol
                next_product_id: null
                cancel_at_end_of_period: false
                payment_collection_method: Duis qui Excepteur laboris reprehenderit
                snap_day: null
                cancellation_method: eiusmod ipsum pariatur et adipisicing
                current_period_started_at: Ut quis non
                previous_state: 'occaecat proident sunt cillum '
                signup_payment_id: -45156092
                signup_revenue: do aliquip ea
                delayed_cancel_at: null
                coupon_code: null
                total_revenue_in_cents: -49740952
                product_price_in_cents: 87617888
                product_version_number: 13656635
                payment_type: null
                referral_code: null
                coupon_use_count: null
                coupon_uses_allowed: null
                reason_code: null
                automatically_resume_at: null
                current_billing_amount_in_cents: -26151968
                customer:
                  id: 15208337
                  first_name: ipsum culpa in labore eiusmod
                  last_name: esse
                  organization: null
                  email: ex eiusmod
                  created_at: ad occaecat cillum
                  updated_at: ut aute proident est
                  reference: laboris ea cupidatat
                  address: null
                  address_2: null
                  city: id eiusmod proident
                  state: magna eiusmod anim non
                  zip: null
                  country: null
                  phone: null
                  portal_invite_last_sent_at: null
                  portal_invite_last_accepted_at: reprehenderit labore voluptate
                  verified: null
                  portal_customer_created_at: nisi aute reprehenderit Excepteur Duis
                  cc_emails: eiusmod sunt
                  tax_exempt: true
                product:
                  id: -74447756
                  name: eu mollit nulla ut aute
                  handle: esse dolor anim
                  description: Lorem ut et non
                  accounting_code: nisi
                  request_credit_card: false
                  expiration_interval: null
                  expiration_interval_unit: fugiat aute do culpa dolor
                  created_at: officia sint
                  updated_at: sed
                  price_in_cents: -4151649
                  interval: 20680876
                  interval_unit: nisi qui incididunt
                  initial_charge_in_cents: null
                  trial_price_in_cents: null
                  trial_interval: null
                  trial_interval_unit: sit
                  archived_at: null
                  require_credit_card: true
                  return_params: magna eu
                  taxable: true
                  update_return_url: exercitation in
                  tax_code: Excepteur aliqua sunt in
                  initial_charge_after_trial: true
                  version_number: 41642597
                  update_return_params: dolore labore
                  product_family:
                    id: -5356997
                    name: officia amet Lorem proident enim
                    description: Duis
                    handle: ea dolore dolore sunt
                    accounting_code: null
                  public_signup_pages: null
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_subscriptions-subscriptionid-pricepoints-resetjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/subscriptions/{subscription_id}/components/{component_id}/allocations.json':
    parameters:
      - name: subscription_id
        in: path
        description: The Subscription ID.
        required: true
        type: integer
      - name: component_id
        in: path
        description: The Component ID.
        required: true
        type: integer
    post:
      operationId: POST_subscriptions-sub_id-components-comp_id-allocations-format
      summary: Allocate Component
      tags:
        - Allocation
        - Subscriptions Components
      description: "## Allocations Documentation\n\nFull documentation on how to record Allocations in the Chargify UI can be located [here](http://help.chargify.com/subscriptions/setting-component-allocations.html).It is focused on how allocations operate within the Chargify UI. It goes into greater detail on how the user interface will react when recording allocations.\n\nThis documentation also goes into greater detail on how proration is taken into consideration when applying component allocations.\n\n## Create Allocation\n\nThis endpoint creates a new allocation, setting the current allocated quantity for the Component and recording a memo.\n\n**Notice**: Allocations can only be updated for Quantity, On/Off, and Prepaid Components.\n\n## Proration Schemes\n\nChanging the allocated quantity of a component mid-period can result in either a Charge or Credit being applied to the subscription. When creating an allocation via the API, you can pass the `upgrade_charge`, `downgrade_credit`, and `accrue_charge` to be applied.\n\n**Notice:** These proration and accural fields will be ignored for Prepaid Components since this component type always generate charges immediately without proration.\n\nFor background information on prorated components and upgrade/downgrade schemes, see: API: [Setting Component Allocations.](<https://help.chargify.com/subscriptions/setting-component-allocations.html>). See the tables below for valid values.\n\n| upgrade_charge | Definition \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_|\n|----------------|-------------------------------------------------------------------|\n| `full` \_ \_ \_ \_ |\_A charge is added for the full price of the component. \_\_\_ \_ \_ \_ \_|\n| `prorated` \_ \_ |\_A charge is added for the prorated price of the component change. |\n| `none` \_ \_ \_ \_ |\_No charge is added. \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ |\n\n| downgrade_credit | Definition \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_|\n|------------------|---------------------------------------------------|\n| `full` \_ \_ \_ \_ \_ |\_A full price credit is added for the amount owed. |\n| `prorated` \_ \_ \_ |\_A prorated credit is added for the amount owed. \_ |\n| `none` \_ \_ \_ \_ \_ |\_No charge is added. \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ |\n\n| accrue_charge | Definition \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_ \_   |\n|---------------|------------------------------------------------------------------------------------------------------------|\n| `true` \_ \_ \_ \_| Attempt to charge the customer at next renewal.                                                            |\n| `false` \_ \_ \_ |\_Attempt to charge the customer right away.\_If it fails, the charge will be accrued until the next renewal. |\n\n### Order of Resolution for upgrade_charge and downgrade_credit\n\n1. Per allocation in API call (within a single allocation of the `allocations` array)\n2. [Component-level default value](<https://help.chargify.com/products/product-components.html#component-proration>)\n3. Allocation API call top level (outside of the `allocations` array)\n4. [Site-level default value](<https://help.chargify.com/subscriptions/setting-component-allocations.html#proration-schemes>)\n\n### Order of Resolution for accrue_charge\n\n1. Allocation API call top level (outside of the `allocations` array)\n2. [Site-level default value](<https://help.chargify.com/subscriptions/setting-component-allocations.html#proration-schemes>)\n\n**NOTE: Proration uses the current price of the component as well as the current tax rates. Changes to either may cause the prorated charge/credit to be wrong.**\n\n## Quantity-Based Components\n\nThe following example will set a quantity of 5 for a quantity-based component.\n\n```\n{\n  \"allocation\": {\n    \"quantity\": 5,\n    \"memo\": \"Recoding component purchase of Acme Support\"\n  }\n}\n```\n\n## On/Off Components\n\nThe following example will toggle an on/off component to ON. A value of `0` will toggle the component to OFF.\n\n**Toggle OFF**\n\n```\n{\n  \"allocation\": {\n    \"quantity\": 0,\n    \"memo\": \"Recoding component purchase of Acme Support\"\n  }\n}\n```\n\n**Toggle ON**\n\n```\n{\n  \"allocation\": {\n    \"quantity\": 1,\n    \"memo\": \"Recoding component purchase of Acme Support\"\n  }\n}\n```"
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/create-allocation-request'
            example:
              allocation:
                quantity: 5
                memo: Recoding component purchase of Acme Support
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/allocation-response'
          examples:
            application/json:
              allocation:
                previous_quantity: 49
                quantity: 85
                subscription_id: 34187461132
                timestamp: '2016-07-12T07:48:08.611Z'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_subscriptions-sub_id-components-comp_id-allocations-format
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          statusCode: 200
    get:
      operationId: GET_subscriptions-sub_id-components-comp_id-allocations-format
      summary: Read Allocations
      tags:
        - Allocation
        - Subscriptions Components
      description: |-
        ## Read Allocations

        This endpoint returns the 50 most recent Allocations, ordered by most recent first.

        ## On/Off Components

        When a subscription's on/off component has been toggled to on (`1`) or off (`0`), usage will be logged in this response.

        ## Querying data via Chargify gem

        You can also query the current quantity via the [official Chargify Gem.]( http://github.com/chargify/chargify_api_ares)

        ```# First way
        component = Chargify::Subscription::Component.find(1, :params => {:subscription_id => 7})
        puts component.allocated_quantity
        # => 23

        # Second way
        component = Chargify::Subscription.find(7).component(1)
        puts component.allocated_quantity
        # => 23
        ```
      parameters:
        - name: body
          in: body
          schema:
            type: 'null'
        - $ref: '#/parameters/trait:pagination50:page'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/allocation-response'
          examples:
            application/json:
              - allocation:
                  memo: moving to 7
                  timestamp: '2012-11-20T22:00:37Z'
                  quantity: 7
                  previous_quantity: 3
                  component_id: 11960
                  subscription_id: 2585595
                  proration_upgrade_scheme: no-prorate
                  proration_downgrade_scheme: no-prorate
              - allocation:
                  memo: null
                  timestamp: '2012-11-20T21:48:09Z'
                  quantity: 3
                  previous_quantity: 0
                  component_id: 11960
                  subscription_id: 2585595
                  proration_upgrade_scheme: no-prorate
                  proration_downgrade_scheme: no-prorate
        '401':
          description: ''
          schema:
            type: string
        '404':
          description: ''
        '422':
          description: ''
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_subscriptions-sub_id-components-comp_id-allocations-format
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          statusCode: 200
  '/subscriptions/{subscription_id}/allocations.json':
    parameters:
      - name: subscription_id
        in: path
        description: The Subscription ID.
        required: true
        type: integer
    post:
      operationId: POST_subscriptions-subscription_id-allocations-json
      summary: Allocate Components
      tags:
        - Allocation
        - Subscriptions Components
      description: |-
        ## Create Multiple Allocations

        Creates multiple allocations, setting the current allocated quantity for each of the components and recording a memo. The charges and/or credits that are created will be rolled up into a single total which is used to determine whether this is an upgrade or a downgrade. Be aware of the Order of Resolutions explained below in determining the proration scheme.

        A `component_id` is required for each allocation.

        This endpoint only responds to JSON. It is not available for XML.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/create-allocations-request'
            example:
              proration_upgrade_scheme: prorate-attempt-capture
              proration_downgrade_scheme: no-prorate
              allocations:
                - component_id: 123
                  quantity: 10
                  memo: foo
                - component_id: 456
                  quantity: 5
                  memo: bar
      responses:
        '201':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/allocation-response'
          examples:
            application/json:
              - allocation:
                  component_id: 193159
                  subscription_id: 15540611
                  quantity: 10
                  previous_quantity: 0
                  memo: foo
                  timestamp: '2016-12-08T19:09:15Z'
                  proration_upgrade_scheme: prorate-attempt-capture
                  proration_downgrade_scheme: no-prorate
                  payment:
                    amount_in_cents: 1451
                    success: true
                    memo: 'Payment for: Prorated component allocation changes.'
                    id: 165473487
              - allocation:
                  component_id: 277221
                  subscription_id: 15540611
                  quantity: 5
                  previous_quantity: 0
                  memo: bar
                  timestamp: '2016-12-08T19:09:15Z'
                  proration_upgrade_scheme: prorate-attempt-capture
                  proration_downgrade_scheme: no-prorate
                  payment:
                    amount_in_cents: 1451
                    success: true
                    memo: 'Payment for: Prorated component allocation changes.'
                    id: 165473487
        '401':
          description: ''
        '404':
          description: ''
        '422':
          description: ''
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: string
          examples:
            application/json:
              errors:
                - 'Quantity: cannot be blank.'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_subscriptions-subscriptionid-allocationsjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          statusCode: 200
  '/subscriptions/{subscription_id}/allocations/preview.json':
    parameters:
      - name: subscription_id
        in: path
        required: true
        type: string
    post:
      operationId: POST-preview-allocation
      summary: Preview Allocations
      tags:
        - Allocation
        - Subscriptions Components
      description: |-
        ## Preview Allocations

        Chargify offers the ability to preview a potential subscription's **quantity-based** or **on/off** component allocation in the middle of the current billing period.  This is useful if you want users to be able to see the effect of a component operation before actually doing it.

        ## Fine-grained Component Control: Use with multiple `upgrade_charge`s or `downgrade_credits`

        When the allocation uses multiple different types of `upgrade_charge`s or `downgrade_credit`s, the Allocation is viewed as an Allocation which uses "Fine-Grained Component Control". As a result, the response will not include `direction` and `proration` within the `allocation_preview` at the `line_items` and `allocations` level respectfully.

        See example below for Fine-Grained Component Control response.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/create-allocation-request'
            example:
              proration_upgrade_scheme: prorate-attempt-capture
              proration_downgrade_scheme: prorate
              allocations:
                - component_id: 554108
                  price_point_id: 325826
                  quantity: 10
                  memo: NOW
                - component_id: 565236
                  price_point_id: 341315
                  quantity: 10
                  memo: NOW
      responses:
        '201':
          description: ''
          schema:
            type: object
            properties:
              allocation_preview:
                type: object
                properties:
                  start_date:
                    type: string
                  end_date:
                    type: string
                  subtotal_in_cents:
                    type: integer
                  total_tax_in_cents:
                    type: integer
                  total_discount_in_cents:
                    type: integer
                  total_in_cents:
                    type: integer
                  direction:
                    type: string
                  proration_scheme:
                    type: string
                  line_items:
                    type: array
                    items:
                      type: object
                      properties:
                        transaction_type:
                          type: string
                        kind:
                          type: string
                        amount_in_cents:
                          type: integer
                        memo:
                          type: string
                        discount_amount_in_cents:
                          type: integer
                        taxable_amount_in_cents:
                          type: integer
                        component_id:
                          type: integer
                        direction:
                          type: string
                  accrue_charge:
                    type: boolean
                  allocations:
                    type: array
                    items:
                      type: object
                      properties:
                        component_id:
                          type: integer
                        subscription_id:
                          type: integer
                        quantity:
                          type:
                            - number
                            - integer
                        previous_quantity:
                          type: integer
                        memo:
                          type: string
                        timestamp:
                          type:
                            - string
                            - 'null'
                        proration_upgrade_scheme:
                          type: string
                        proration_downgrade_scheme:
                          type: string
                        accrue_charge:
                          type: boolean
                        upgrade_charge:
                          type: string
                        downgrade_credit:
                          type: string
          examples:
            application/json:
              allocation_preview:
                start_date: '2019-05-02T15:26:46Z'
                end_date: '2019-05-08T15:26:46Z'
                period_type: prorated
                total_in_cents: 150
                total_discount_in_cents: 0
                total_tax_in_cents: 0
                subtotal_in_cents: 150
                existing_balance_in_cents: 0
                accrue_charge: true
                line_items:
                  - direction: upgrade
                    transaction_type: charge
                    kind: quantity_based_component
                    amount_in_cents: 100
                    taxable_amount_in_cents: 0
                    discount_amount_in_cents: 0
                    memo: 'Foo: 0 to 10 foo'
                    component_id: 123
                    component_handle: foo
                  - direction: downgrade
                    transaction_type: credit
                    kind: quantity_based_component
                    amount_in_cents: -20
                    taxable_amount_in_cents: 0
                    discount_amount_in_cents: 0
                    memo: 'Foo: 10 to 5 bar'
                    component_id: 456
                    component_handle: bar
                  - direction: upgrade
                    transaction_type: credit
                    kind: quantity_based_component
                    amount_in_cents: 70
                    taxable_amount_in_cents: 0
                    discount_amount_in_cents: 0
                    memo: 'Foo: 0 to 10 baz'
                    component_id: 789
                    component_handle: baz
                allocations:
                  - accrue_charge: true
                    upgrade_charge: prorated
                    downgrade_credit: full
                    component_handle: foo
                    component_id: 123
                    memo: foo
                    previous_price_point_id: 123
                    previous_quantity: 0
                    price_point_id: 123
                    proration_downgrade_scheme: full
                    proration_upgrade_scheme: prorate-delay-capture
                    quantity: 10
                    subscription_id: 123456
                    timestamp: null
                  - accrue_charge: true
                    upgrade_charge: full
                    downgrade_credit: prorated
                    component_handle: bar
                    component_id: 456
                    memo: foo
                    previous_price_point_id: 456
                    previous_quantity: 10
                    price_point_id: 456
                    proration_downgrade_scheme: prorate
                    proration_upgrade_scheme: full-price-delay-capture
                    quantity: 5
                    subscription_id: 123456
                    timestamp: null
                  - accrue_charge: true
                    upgrade_charge: full
                    downgrade_credit: none
                    component_handle: baz
                    component_id: 789
                    memo: foo
                    previous_price_point_id: 789
                    previous_quantity: 0
                    price_point_id: 789
                    proration_downgrade_scheme: no-prorate
                    proration_upgrade_scheme: full-price-delay-capture
                    quantity: 10
                    subscription_id: 123456
                    timestamp: null
        '422':
          description: ''
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    kind:
                      type: string
                    component_id:
                      type: integer
                    'on':
                      type: string
                    message:
                      type: string
          examples:
            application/json:
              errors:
                - kind: allocation
                  component_id: 379512
                  'on': base
                  message: Allocations can only be updated for quantity and on/off components.
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST-preview-allocation
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/subscriptions/{subscription_id}/components/{component_id}/allocations/{allocation_id}.json':
    parameters:
      - name: subscription_id
        in: path
        required: true
        type: string
      - name: component_id
        in: path
        required: true
        type: string
      - name: allocation_id
        in: path
        required: true
        type: string
    put:
      operationId: PUT_subscriptions-subscription_id-components-component_id-allocations-allocation_id-json
      summary: Update Prepaid Usage Allocation Expiration Date
      tags:
        - Subscriptions Components
      description: |-
        ## Updating a Prepaid Usage Allocation's Expiration Date

        When the expiration interval options are selected on a prepaid usage component price point, all allocations will be created with an expiration date. This expiration date can be changed after the fact to allow for extending or shortening the allocation's active window.

        In order to change a prepaid usage allocation's expiration date, a PUT call must be made to the allocation's endpoint with a new expiration date.

        ## Limitations

        A few limitations exist when changing an allocation's expiration date:

        - An expiration date can only be changed for an allocation that belongs to a price point with expiration interval options explicitly set.
        - An expiration date can be changed towards the future with no limitations.
        - An expiration date can be changed towards the past (essentially expiring it) up to the subscription's current period beginning date.
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              allocation:
                type: object
                properties:
                  expires_at:
                    type: string
            example:
              allocation:
                expires_at: 05/07/2021
      responses:
        '200':
          description: ''
        '422':
          description: ''
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    kind:
                      type: string
                    message:
                      type: string
          examples:
            application/json:
              errors:
                - kind: base
                  message: 'Credit scheme must be one of credit, refund or none.'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: PUT_subscriptions-subscriptionid-components-componentid-allocations-allocationidjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    delete:
      operationId: DELETE_subscriptions-subscription_id-components-component_id-allocations-allocation_id-json
      summary: Delete Prepaid Usage Allocation
      tags:
        - Subscriptions Components
      description: |-
        ## Delete Prepaid Usage Allocation

        Prepaid Usage components are unique in that their allocations are always additive. In order to reduce a subscription's allocated quantity for a prepaid usage component each allocation must be destroyed individually via this endpoint.

        ## Credit Scheme

        By default, destroying an allocation will generate a service credit on the subscription. This behavior can be modified with the optional `credit_scheme` parameter on this endpoint. The accepted values are:

        1. `none`: The allocation will be destroyed and the balances will be updated but no service credit or refund will be created.
        2. `credit`: The allocation will be destroyed and the balances will be updated and a service credit will be generated. This is also the default behavior if the `credit_scheme` param is not passed.
        3. `refund`: The allocation will be destroyed and the balances will be updated and a refund will be issued along with a Credit Note.
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              credit_scheme:
                type: string
            example:
              credit_scheme: none
      responses:
        '200':
          description: ''
        '422':
          description: ''
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    kind:
                      type: string
                    message:
                      type: string
          examples:
            application/json:
              errors:
                - kind: base
                  message: 'Credit scheme must be one of credit, refund or none.'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: DELETE_subscriptions-subscriptionid-components-componentid-allocations-allocationidjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/subscriptions/{subscription_id}/components/{component_id}/usages.json':
    parameters:
      - name: subscription_id
        in: path
        required: true
        type: string
      - name: component_id
        in: path
        description: 'either an integer or a string prefixed by "handle:"'
        required: true
        type: string
    post:
      operationId: POST_subscriptions-subscription_id-components-component_id-usages-json
      summary: Create Usage for Subscription
      tags:
        - Subscriptions Components
      description: |-
        ## Documentation

        Full documentation on how to create Components in the Chargify UI can be located [here](https://help.chargify.com/products/product-components.html). Additionally, for information on how to record component usage against a subscription, please see the following resources:

        + [Recording Metered Component Usage](https://help.chargify.com/subscriptions/setting-component-allocations.html#reporting-metered-component-usage)
        + [Reporting Prepaid Component Status](https://help.chargify.com/subscriptions/setting-component-allocations.html#reporting-prepaid-component-status)

        You may choose to report metered or prepaid usage to Chargify as often as you wish. You may report usage as it happens. You may also report usage periodically, such as each night or once per billing period. If usage events occur in your system very frequently (on the order of thousands of times an hour), it is best to accumulate usage into batches on your side, and then report those batches less frequently, such as daily. This will ensure you remain below any API throttling limits. If your use case requires higher rates of usage reporting, we recommend utilizing Events Based Components.

        ## Create Usage for Subscription

        This endpoint allows you to record an instance of metered or prepaid usage for a subscription. The `quantity` from usage for each component is accumulated to the `unit_balance` on the [Component Line Item](https://reference.chargify.com/v1/component-line-items/component-line-items) for the subscription.

        ## Price Point ID usage

        If you are using price points, for metered and prepaid usage components, Chargify gives you the option to specify a price point in your request.

        You do not need to specify a price point ID. If a price point is not included, the default price point for the component will be used when the usage is recorded.

        If an invalid `price_point_id` is submitted, the endpoint will return an error. 

        ## Deducting Usage

        In the event that you need to reverse a previous usage report or otherwise deduct from the current usage balance, you may provide a negative quantity.

        Example:

        Previously recorded:

        ```{
          "usage": {
            "quantity": 5000,
            "memo": "Recording 5000 units"
          }
        }
        ```

        At this point, `unit_balance` would be `5000`. To reduce the balance to `0`, POST the following payload:

        ```{
          "usage": {
            "quantity": -5000,
            "memo": "Deducting 5000 units"
          }
        }
        ```

        The `unit_balance` has a floor of `0`; negative unit balances are never allowed. For example, if the usage balance is 100 and you deduct 200 units, the unit balance would then be `0`, not `-100`.

        ## FAQ

        Q. Is it possible to record metered usage for more than one component at a time?

        A. No. Usage should be reported as one API call per component on a single subscription. For example, to record that a subscriber has sent both an SMS Message and an Email, send an API call for each.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/create-usage'
            example:
              usage:
                quantity: 1000
                price_point_id: '149416'
                memo: My memo
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/usage'
          examples:
            application/json:
              usage:
                id: 138522957
                memo: My memo
                created_at: '2017-11-13T10:05:32-06:00'
                price_point_id: 149416
                quantity: 1000
        '422':
          description: ''
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: string
          examples:
            application/json:
              errors:
                - 'Price point: could not be found.'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_subscriptions-subscriptionid-components-componentid-usagesjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    get:
      operationId: GET_subscriptions-subscription_id-components-component_id-usages-json
      summary: List Usages for Subscription
      tags:
        - Subscriptions Components
      description: |-
        ## Read Usage by Component

        This request will return a list of the usages associated with a subscription for a particular metered component. This will display the previously recorded components for a subscription.

        This endpoint is not compatible with quantity-based components.

        ## Since Date and Until Date Usage 

        Note: The `since_date` and `until_date` attributes each default to midnight on the date specified. For example, in order to list usages for January 20th, you would need to append the following to the URL. 

        ```
        ?since_date=2016-01-20&until_date=2016-01-21
        ```

        ## Read Usage by Handle

        Use this endpoint to read the previously recorded components for a subscription.  You can now specify either the component id (integer) or the component handle prefixed by "handle:" to specify the unique identifier for the component you are working with.
      parameters:
        - $ref: '#/parameters/trait:componentParameters:since_id'
        - $ref: '#/parameters/trait:componentParameters:max_id'
        - $ref: '#/parameters/trait:componentParameters:since_date'
        - $ref: '#/parameters/trait:componentParameters:until_date'
        - $ref: '#/parameters/trait:componentParameters:page'
        - $ref: '#/parameters/trait:componentParameters:per_page'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/usage'
          examples:
            application/json:
              - usage:
                  id: 178534642
                  memo: '20'
                  created_at: '2018-08-03T11:58:42-05:00'
                  price_point_id: 242632
                  quantity: '20.0'
                  component_id: 500093
                  component_handle: handle
                  subscription_id: 22824464
              - usage:
                  id: 178534591
                  memo: '10'
                  created_at: '2018-08-03T11:58:29-05:00'
                  price_point_id: 242632
                  quantity: '10.0'
                  component_id: 500093
                  component_handle: handle
                  subscription_id: 22824464
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_subscriptions-subscriptionid-components-componentid-usagesjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/event_based_billing/subscriptions/{subscription_id}/components/{component_id}/activate.json':
    parameters:
      - name: subscription_id
        in: path
        description: Subscription ID
        required: true
        type: string
      - name: component_id
        in: path
        description: Component ID
        required: true
        type: string
    post:
      operationId: POST_event_based_billing-subscriptions-subscription_id-components-component_id-activate-json
      summary: Activate Event-Based Component for Subscription
      tags:
        - Subscriptions Components
      description: |-
        In order to bill your subscribers on your Events data under the Events-Based Billing feature, the components must be activated for the subscriber.

        Learn more about the role of activation in the [Events-Based Billing docs](https://help.chargify.com/events/billing-guide.html#activating-components-for-subscribers).

        Use this endpoint to activate an event-based component for a single subscription. Activating an event-based component causes Chargify to bill for events when the subscription is renewed.

        *Note: it is possible to stream events for a subscription at any time, regardless of component activation status. The activation status only determines if the subscription should be billed for event-based component usage at renewal.*
      responses:
        '200':
          description: ''
          schema:
            type: object
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_eventbasedbilling-subscriptions-subscriptionid-components-componentid-activatejson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/event_based_billing/subscriptions/{subscription_id}/components/{component_id}/deactivate.json':
    parameters:
      - name: subscription_id
        in: path
        description: Subscription ID
        required: true
        type: string
      - name: component_id
        in: path
        description: Component ID
        required: true
        type: string
    post:
      operationId: POST_event_based_billing-subscriptions-subscription_id-components-component_id-deactivate-json
      summary: Deactivate Event-Based Component for Subscription
      tags:
        - Subscriptions Components
      description: Use this endpoint to deactivate an event-based component for a single subscription. Deactivating the event-based component causes Chargify to ignore related events at subscription renewal.
      responses:
        '200':
          description: ''
          schema:
            type: object
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_eventbasedbilling-subscriptions-subscriptionid-components-componentid-deactivatejson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /subscriptions.json:
    post:
      operationId: POST_subscriptions-json
      summary: Create Subscription with a Coupon
      tags:
        - Subscriptions Components
      description: |-
        ## Create Subscription with a Coupon

        This method allows you to create a Subscription within Chargify with a coupon applied at signup.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/coupon-create-subscription-with-coupon-input'
            example:
              subscription:
                product_handle: basic
                customer_attributes:
                  first_name: Joe
                  last_name: Blow
                  email: joe@example.com
                credit_card_attributes:
                  full_number: '1'
                  expiration_month: '10'
                  expiration_year: '2020'
                coupon_code: 100PERCENT
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/coupon-create-subscription-with-coupon-output'
          examples:
            application/json:
              subscription:
                id: 15479934
                state: active
                trial_started_at: null
                trial_ended_at: null
                activated_at: '2016-12-02T15:59:08-05:00'
                created_at: '2016-12-02T15:59:06-05:00'
                updated_at: '2016-12-02T15:59:08-05:00'
                expires_at: null
                balance_in_cents: 0
                current_period_ends_at: '2016-12-03T15:59:06-05:00'
                next_assessment_at: '2016-12-03T15:59:06-05:00'
                canceled_at: null
                cancellation_message: null
                next_product_id: null
                cancel_at_end_of_period: null
                payment_collection_method: automatic
                snap_day: null
                cancellation_method: null
                current_period_started_at: '2016-12-02T15:59:06-05:00'
                previous_state: active
                signup_payment_id: 164720323
                signup_revenue: '5.00'
                delayed_cancel_at: null
                coupon_code: 100PERCENT
                total_revenue_in_cents: 500
                product_price_in_cents: 1000
                product_version_number: 7
                payment_type: credit_card
                referral_code: 7b8p8v
                coupon_use_count: 1
                coupon_uses_allowed: null
                customer:
                  id: 14943291
                  first_name: Joe
                  last_name: Blow
                  organization: null
                  email: joe@example.com
                  created_at: '2016-12-02T15:59:06-05:00'
                  updated_at: '2016-12-02T15:59:09-05:00'
                  reference: null
                  address: null
                  address_2: null
                  city: null
                  state: null
                  zip: null
                  country: null
                  phone: null
                  portal_invite_last_sent_at: '2016-12-02T15:59:09-05:00'
                  portal_invite_last_accepted_at: null
                  verified: false
                  portal_customer_created_at: '2016-12-02T15:59:09-05:00'
                  cc_emails: null
                  tax_exempt: false
                product:
                  id: 3792003
                  name: $10 Basic Plan
                  handle: basic
                  description: lorem ipsum
                  accounting_code: basic
                  request_credit_card: false
                  expiration_interval: null
                  expiration_interval_unit: never
                  created_at: '2016-03-24T13:38:39-04:00'
                  updated_at: '2016-11-03T13:03:05-04:00'
                  price_in_cents: 1000
                  interval: 1
                  interval_unit: day
                  initial_charge_in_cents: null
                  trial_price_in_cents: null
                  trial_interval: null
                  trial_interval_unit: month
                  archived_at: null
                  require_credit_card: false
                  return_params: ''
                  taxable: false
                  update_return_url: ''
                  initial_charge_after_trial: false
                  version_number: 7
                  update_return_params: ''
                  product_family:
                    id: 527890
                    name: Acme Projects
                    description: ''
                    handle: billing-plans
                    accounting_code: null
                  public_signup_pages:
                    - id: 281054
                      return_url: 'http://www.example.com?successfulsignup'
                      return_params: ''
                      url: 'https://general-goods.chargify.com/subscribe/kqvmfrbgd89q/basic'
                    - id: 281240
                      return_url: ''
                      return_params: ''
                      url: 'https://general-goods.chargify.com/subscribe/dkffht5dxfd8/basic'
                    - id: 282694
                      return_url: ''
                      return_params: ''
                      url: 'https://general-goods.chargify.com/subscribe/jwffwgdd95s8/basic'
                credit_card:
                  id: 10345872
                  first_name: Joe
                  last_name: Blow
                  masked_card_number: XXXX-XXXX-XXXX-1
                  card_type: bogus
                  expiration_month: 10
                  expiration_year: 2020
                  customer_id: 14943291
                  current_vault: bogus
                  vault_token: '1'
                  billing_address: null
                  billing_city: null
                  billing_state: null
                  billing_zip: null
                  billing_country: null
                  customer_vault_token: null
                  billing_address_2: null
                  payment_type: credit_card
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_subscriptionsjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    get:
      operationId: GET_subscriptions-json
      summary: List Subscriptions
      tags:
        - Subscriptions
      description: |-
        ## List Subscriptions

        This method will return an array of subscriptions from a Site. Pay close attention to query string filters and pagination in order to control responses from the server.

        ## Search for a subscription

        Use the query strings below to search for a subscription using the criteria available. The return value will be an array.

        ### Self-Service Page token
        Self-Service Page token for the subscriptions is not returned by default. If this information is desired, the include[]=self_service_page_token parameter must be provided with the request.
      parameters:
        - name: sort
          in: query
          description: |
            Allowed sort keys.
          type: string
          default: signup_date
          enum:
            - signup_date
            - period_start
            - period_end
            - next_assessment
            - updated_at
            - created_at
        - $ref: '#/parameters/trait:subscriptionQueryString:page'
        - $ref: '#/parameters/trait:subscriptionQueryString:per_page'
        - $ref: '#/parameters/trait:subscriptionQueryString:state'
        - $ref: '#/parameters/trait:subscriptionQueryString:product'
        - $ref: '#/parameters/trait:subscriptionQueryString:product_price_point_id'
        - $ref: '#/parameters/trait:subscriptionQueryString:coupon'
        - $ref: '#/parameters/trait:subscriptionQueryString:date_field'
        - $ref: '#/parameters/trait:subscriptionQueryString:start_date'
        - $ref: '#/parameters/trait:subscriptionQueryString:end_date'
        - $ref: '#/parameters/trait:subscriptionQueryString:start_datetime'
        - $ref: '#/parameters/trait:subscriptionQueryString:end_datetime'
        - $ref: '#/parameters/trait:subscriptionQueryString:metadata[Field Name]'
        - $ref: '#/parameters/trait:subscriptionQueryString:direction'
        - $ref: '#/parameters/trait:pagination20:page'
        - $ref: '#/parameters/trait:pagination20:per_page'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/subscription-read-subscription'
          examples:
            application/json:
              - subscription:
                  id: -11823623
                  state: adipisicing
                  balance_in_cents: -96287041
                  total_revenue_in_cents: -25152484
                  product_price_in_cents: 67836376
                  product_version_number: -73181688
                  current_period_ends_at: eu ad tempor
                  next_assessment_at: ullamco velit aute sed aliquip
                  activated_at: et labore deserunt in
                  created_at: fugiat ipsum Lorem
                  updated_at: laborum Lorem aliqua velit
                  current_period_started_at: sint voluptate
                  previous_state: laboris veniam nisi minim qui
                  signup_payment_id: -40978135
                  signup_revenue: mollit
                  coupon_code: enim
                  payment_collection_method: ipsum anim Excepteur in in
                  receives_invoice_emails: false
                  net_terms: 74274302
                  reference: magna enim ad sunt dolor
                  customer:
                    first_name: ipsum
                    last_name: ea nulla est consequat nostrud
                    email: adip
                    cc_emails: quis ipsum amet esse
                    organization: do ad
                    id: 34566138
                    created_at: amet occaecat
                    updated_at: aliquip commodo in nulla velit
                    address: labo
                    address_2: commodo dolor
                    city: in in elit ut
                    state: eiusm
                    zip: elit magna ullamco
                    country: laboris dolor ut Excepteur aliquip
                    phone: velit cillum commodo cupidatat do
                    verified: true
                    portal_customer_created_at: ullamco esse voluptate
                    portal_invite_last_sent_at: minim sunt
                    tax_exempt: true
                    vat_number: reprehenderit ex veniam magna adipisicing
                  product:
                    id: 28248851
                    name: veniam id dolor incididunt
                    handle: sunt laboris non dolore
                    description: et veniam amet nisi ea
                    accounting_code: laboris Excepteur Lorem
                    price_in_cents: -68291364
                    interval: -22713649
                    interval_unit: enim labore Excepteur i
                    expiration_interval_unit: mollit sit
                    trial_interval_unit: dolore Duis
                    initial_charge_after_trial: true
                    return_params: nisi in reprehenderit tempor
                    request_credit_card: true
                    require_credit_card: true
                    created_at: voluptate ad aute dolor
                    updated_at: mollit consequat
                    update_return_url: cillum commodo mollit magna adipisicing
                    update_return_params: dol
                    product_family:
                      id: -94283401
                      name: Ut labore mollit nostrud
                      handle: reprehenderit non exercitation
                      description: dolor in esse aute
                    public_signup_pages:
                      - url: sunt
                        id: -14952618
                    taxable: false
                    version_number: 52958571
                    product_price_point_name: sed
                  credit_card:
                    id: 41539882
                    payment_type: fugiat est sed minim incididunt
                    first_name: occaecat
                    last_name: nulla fugiat sint tempor dolore
                    masked_card_number: 'incididunt '
                    card_type: fugiat
                    expiration_month: -57160880
                    expiration_year: -30975777
                    billing_address: aute
                    billing_address_2: velit nisi Lorem Ut
                    billing_city: ex labore incididunt ea
                    billing_country: et reprehenderit sit ni
                    billing_zip: id amet eiusmod deserunt eu
                    current_vault: 'deserunt qui '
                    vault_token: cillum
                    customer_id: 4972509
                  payment_type: tempor nisi
                  referral_code: laboris
                  coupon_use_count: 90476416
                  coupon_uses_allowed: -25038700
                  stored_credential_transaction_id: -8772090
                  scheduled_cancellation_at: in
              - subscription:
                  id: -86802866
                  state: sint sed do esse
                  balance_in_cents: -10957242
                  total_revenue_in_cents: 32292655
                  product_price_in_cents: -86417570
                  product_version_number: 2627916
                  current_period_ends_at: minim proident Ut commodo reprehenderit
                  next_assessment_at: irure
                  activated_at: ad
                  created_at: in nulla reprehenderit
                  updated_at: esse aliquip
                  current_period_started_at: sed
                  previous_state: anim aute
                  signup_payment_id: -10468041
                  signup_revenue: dolore veniam irure officia
                  coupon_code: consequat id aliqua non
                  payment_collection_method: proid
                  receives_invoice_emails: false
                  net_terms: -7167324
                  reference: do labore magna elit irure
                  customer:
                    first_name: in nisi irure
                    last_name: Ut in magna
                    email: minim exercitation elit
                    cc_emails: dolore culpa
                    organization: Excepteur veniam
                    id: -46291409
                    created_at: elit Excepteur commodo aute
                    updated_at: sint non magna dolor
                    address: eiusmod labore id laboris Lorem
                    address_2: cillum sed
                    city: occaecat officia pariatur in
                    state: irure cupidatat
                    zip: culpa et eiusmod
                    country: Ut proident
                    phone: velit sint esse ad
                    verified: false
                    portal_customer_created_at: ipsum Ut
                    portal_invite_last_sent_at: aliquip dolor deserunt
                    tax_exempt: false
                    vat_number: nisi deserunt Ut
                  product:
                    id: 5640425
                    name: minim id
                    handle: magna
                    description: occaecat voluptate l
                    accounting_code: 'exercitation tempor '
                    price_in_cents: 18462362
                    interval: 2514527
                    interval_unit: nostrud laborum sunt
                    expiration_interval_unit: culpa minim mollit dolore
                    trial_interval_unit: esse Excepteur officia conse
                    initial_charge_after_trial: false
                    return_params: in
                    request_credit_card: true
                    require_credit_card: true
                    created_at: ex aliqua cillum nulla non
                    updated_at: do
                    update_return_url: in nisi tempor
                    update_return_params: culpa
                    product_family:
                      id: 23999340
                      name: cupidatat ut
                      handle: aliqua
                      description: in
                    public_signup_pages:
                      - url: ex ut et dolor minim
                        id: -16171269
                      - url: exercitation mollit culpa esse pariatur
                        id: -72174665
                    taxable: false
                    version_number: -17282410
                    product_price_point_name: voluptate nisi
                  credit_card:
                    id: -17795449
                    payment_type: do
                    first_name: cillum aliquip ipsum ea
                    last_name: eiusmod ullamco tempor qui mollit
                    masked_card_number: quis
                    card_type: qui amet Lorem dolor
                    expiration_month: 84988526
                    expiration_year: 74037011
                    billing_address: ex Lorem Ut amet
                    billing_address_2: in nostrud
                    billing_city: fugiat dolor
                    billing_country: aliquip consectetur enim
                    billing_zip: anim Excepteur laboris aliquip quis
                    current_vault: eu adipisicing labore id
                    vault_token: adipisicing velit aute non
                    customer_id: -11090723
                  payment_type: ullamco
                  referral_code: velit am
                  coupon_use_count: 22223275
                  coupon_uses_allowed: -27671065
                  stored_credential_transaction_id: 30873929
                  scheduled_cancellation_at: velit cillum
              - subscription:
                  id: -34052792
                  state: sint Excepteur id Lorem magna
                  balance_in_cents: 86817426
                  total_revenue_in_cents: 32173775
                  product_price_in_cents: 49119449
                  product_version_number: 32682300
                  current_period_ends_at: sint eiusmod
                  next_assessment_at: Ut cupidatat sed
                  activated_at: ea laboris incididunt nostrud dolore
                  created_at: veniam commodo minim et anim
                  updated_at: sed Ut
                  current_period_started_at: proident fugiat laboris Excepteur aliqua
                  previous_state: elit
                  signup_payment_id: -15324035
                  signup_revenue: aliquip ad tempor id
                  coupon_code: culp
                  payment_collection_method: est nostrud eu Duis cupidatat
                  receives_invoice_emails: false
                  net_terms: -87301537
                  reference: consequat dolor
                  customer:
                    first_name: in
                    last_name: velit dolore
                    email: officia ullamco Ut elit
                    cc_emails: eu
                    organization: Excepteur
                    id: -93503270
                    created_at: est cillum in esse
                    updated_at: id
                    address: sunt ut
                    address_2: nostrud deserunt Excepteur sed
                    city: cupid
                    state: velit occaecat
                    zip: commodo ut magna p
                    country: et Excepteur
                    phone: Excepteur
                    verified: true
                    portal_customer_created_at: ullamco
                    portal_invite_last_sent_at: pariatur
                    tax_exempt: false
                    vat_number: in labore esse laborum Excepteur
                  product:
                    id: -53303494
                    name: ullamco nostrud
                    handle: nost
                    description: proident laboris dolore
                    accounting_code: cupidatat
                    price_in_cents: -17275838
                    interval: -27934135
                    interval_unit: nisi velit anim
                    expiration_interval_unit: minim dolor sint dolor culpa
                    trial_interval_unit: aute consectetur minim proident ad
                    initial_charge_after_trial: true
                    return_params: ex
                    request_credit_card: false
                    require_credit_card: true
                    created_at: culpa voluptate cillum ipsum esse
                    updated_at: la
                    update_return_url: reprehenderit non qui mollit adipisicing
                    update_return_params: ex elit quis nulla dolore
                    product_family:
                      id: 35738311
                      name: reprehenderit volu
                      handle: cillum veniam
                      description: officia occaecat ex amet
                    public_signup_pages:
                      - id: 34140924
                        url: dolor
                      - url: aliquip elit proident
                        id: -40397442
                    taxable: false
                    version_number: 85142031
                    product_price_point_name: cillum ut velit amet
                  credit_card:
                    id: -68836615
                    payment_type: occaecat Lorem
                    first_name: proident Lorem culpa est reprehenderit
                    last_name: ''
                    masked_card_number: amet labore
                    card_type: mollit
                    expiration_month: 30840801
                    expiration_year: 29440776
                    billing_address: dolor laborum ut ad
                    billing_address_2: aliqua dolor se
                    billing_city: ipsum
                    billing_country: aute
                    billing_zip: esse ullamco
                    current_vault: sunt laborum laboris
                    vault_token: Lorem voluptate nisi
                    customer_id: 79568843
                  payment_type: cupidatat anim incididunt et dolor
                  referral_code: 'n'
                  coupon_use_count: -80545060
                  coupon_uses_allowed: -45209638
                  stored_credential_transaction_id: 87066437
                  scheduled_cancellation_at: reprehenderit
              - subscription:
                  id: -29957607
                  state: est amet ad ut
                  balance_in_cents: -4958742
                  total_revenue_in_cents: 94939156
                  product_price_in_cents: -2310976
                  product_version_number: 84443627
                  current_period_ends_at: adipisicing nulla incididunt Ut Duis
                  next_assessment_at: dolore
                  activated_at: deserunt tempor veniam
                  created_at: Excepteur dolore laboris incididunt nulla
                  updated_at: reprehenderit commodo
                  current_period_started_at: Lorem deserunt esse et veniam
                  previous_state: veniam id ut
                  signup_payment_id: -99755141
                  signup_revenue: aute ut minim proident
                  coupon_code: labore tempor sit enim
                  payment_collection_method: ex aute officia laboris
                  receives_invoice_emails: true
                  net_terms: 7432473
                  reference: quis
                  customer:
                    first_name: in eiusmod
                    last_name: magna nisi ullamco
                    email: irure enim ad la
                    cc_emails: ea Duis eu do
                    organization: nulla veniam nisi Du
                    id: 33995400
                    created_at: in c
                    updated_at: laboris laborum sint
                    address: id labore nostrud deserunt
                    address_2: consequat
                    city: dolor sed
                    state: ut minim
                    zip: cillum e
                    country: eu consequat
                    phone: nulla magna aute
                    verified: true
                    portal_customer_created_at: non sint cupidatat dolor dolor
                    portal_invite_last_sent_at: quis
                    tax_exempt: true
                    vat_number: eu ut reprehenderit
                  product:
                    id: -4161731
                    name: ex
                    handle: dolore do exercitation esse
                    description: qui eu sunt
                    accounting_code: ut ullamco quis
                    price_in_cents: -94028013
                    interval: -40463669
                    interval_unit: do laborum
                    expiration_interval_unit: proident in Lorem
                    trial_interval_unit: ullamco irure do dolore commodo
                    initial_charge_after_trial: true
                    return_params: adipisicing es
                    request_credit_card: true
                    require_credit_card: false
                    created_at: non dolore mollit culpa dolor
                    updated_at: exercitation veniam cupidatat
                    update_return_url: aute sunt cillum laboris
                    update_return_params: voluptate
                    product_family:
                      id: -99840944
                      name: cillum aute
                      handle: laborum
                      description: Duis Lorem ullamco ea Ut
                    public_signup_pages:
                      - url: ut veniam
                      - url: est sed
                        id: 67405143
                      - id: -86199551
                    taxable: true
                    version_number: 10853110
                    product_price_point_name: Duis eiusmod est
                  credit_card:
                    id: 73134598
                    payment_type: aliquip Duis ullamco
                    first_name: laborum Ut
                    last_name: in pariatur qui esse
                    masked_card_number: ullamco dolore id elit
                    card_type: deserunt
                    expiration_month: 43975874
                    expiration_year: 89249131
                    billing_address: adipisicing aliqua pariatur esse ullamco
                    billing_address_2: laboris aliquip id eiusmod
                    billing_city: mollit aliqua Excepteur sit sint
                    billing_country: labore
                    billing_zip: tempor ea eiusmod
                    current_vault: eiusmod
                    vault_token: elit
                    customer_id: -70677969
                  payment_type: aliqua adipisicing aliquip voluptate
                  referral_code: Excepteur ipsum en
                  coupon_use_count: 2777673
                  coupon_uses_allowed: 34857086
                  stored_credential_transaction_id: -88906037
                  scheduled_cancellation_at: repre
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_subscriptionsjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/product_families/{product_family_id}/coupons.json':
    parameters:
      - name: product_family_id
        in: path
        required: true
        type: string
    post:
      operationId: POST_coupons-format
      summary: Create Coupon
      tags:
        - Coupon
        - Coupons
      description: |-
        ## Coupons Intro

        Coupons can be administered in the Chargify application or created via API. Please view our section on [creating coupons](https://help.chargify.com/products/product-coupons.html) for more information. 

        Additionally, for documentation on how to apply a coupon to a subscription within the Chargify UI, please see our documentation [here](https://help.chargify.com/subscriptions/subscription-summary.html#coupon).

        ## Flat Amount v. Discount

        In this endpoint, there are two JSON examples listed on how to create coupons. The first example is how to create a percentage based coupon, using `percentage`. This server response indicates a percentage based amount as the coupon's attributes, versus a flat amount.

        The second example is how to create a coupon for a flat amount using `amount_in_cents` as the parameter to define the discount amount.

        Please be aware of the different types of coupons that can be created in Chargify.

        ## Coupon Attributes

        When creating a coupon, you must specify a product family using the `product_family_id`. If no `product_family_id` is passed, the first product family available is used. You will also need to formulate your URL to cite the Product Family ID in your request.

        ## Create a Coupon

        This request will create a coupon, based on the provided information.

        You can restrict a coupon to only apply to specific products / components by optionally passing in hashes of `restricted_products` and/or `restricted_components` in the format:
        `{ "<product/component_id>": boolean_value }`

        The coupon's `code` may contain uppercase alphanumeric characters and these special characters (which allow for email addresses to be used): “%”, “@”, “+”, “-”, “_”, and “.”
      parameters:
        - name: body
          in: body
          schema:
            oneOf:
              - $ref: '#/definitions/coupons-create-coupon-input-percentage'
              - $ref: '#/definitions/coupons-create-coupon-input-flat-amount'
            example:
              coupon:
                name: 15% off
                code: 15OFF
                description: 15% off for life
                percentage: '15'
                allow_negative_balance: 'false'
                recurring: 'false'
                end_date: '2012-08-29T12:00:00-04:00'
                product_family_id: '2'
                stackable: 'true'
                compounding_strategy: compound
              restricted_products:
                '1': true
              restricted_components:
                '1': true
                '2': false
      responses:
        '201':
          description: Created
          schema:
            oneOf:
              - $ref: '#/definitions/coupons-create-coupon-input-percentage'
              - $ref: '#/definitions/coupons-create-coupon-input-flat-amount'
          examples:
            application/json:
              coupon:
                name: 15% off
                code: 15OFF
                description: 15% off for life
                percentage: 33.3333
                allow_negative_balance: 'false'
                recurring: 'false'
                end_date: '2012-08-29T12:00:00-04:00'
                product_family_id: '2'
                stackable: 'true'
                compounding_strategy: compound
              restricted_products:
                '1': true
              restricted_components:
                '1': true
                '2': false
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_coupons-format
        beforeScript: null
        afterScript: null
        public: true
        mock:
          statusCode: 200
          enabled: false
    get:
      operationId: GET_product_families-product_family_id-coupons-json
      summary: List Coupons in Product Family
      tags:
        - Coupons
      description: |-
        ## Read Coupons for a Specific Product Family

        List coupons for a specific Product Family in a Site.

        When fetching coupons, if you have defined multiple currencies at the site level, you can optionally pass the `?currency_prices=true` query param to include an array of currency price data in the response.

        If the coupon is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
      produces:
        - application/xml
      parameters:
        - $ref: '#/parameters/trait:pagination30:page'
        - $ref: '#/parameters/trait:pagination30:per_page'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/coupons-list-coupons-for-a-site-output'
          examples:
            application/json:
              - coupon:
                  id: 999999
                  name: 50% coupon
                  code: 50PERCENT
                  description: 50 PERCENT OFF
                  amount_in_cents: null
                  product_family_id: 527890
                  created_at: '2016-10-21T17:02:08-04:00'
                  updated_at: '2016-10-21T17:06:11-04:00'
                  start_date: '2016-10-21T17:02:08-04:00'
                  end_date: null
                  percentage: 50
                  recurring: true
                  duration_period_count: null
                  duration_interval: 1
                  duration_interval_unit: day
                  allow_negative_balance: true
                  archived_at: null
                  conversion_limit: 100
                  stackable: false
                  compounding_strategy: compound
                  coupon_restrictions: []
              - coupon:
                  id: 123456
                  name: 100% coupon
                  code: 100PERCENT
                  description: 100 PERCENT OFF
                  amount_in_cents: null
                  product_family_id: 527890
                  created_at: '2016-10-21T17:02:08-04:00'
                  updated_at: '2016-10-21T17:06:11-04:00'
                  start_date: '2016-10-21T17:02:08-04:00'
                  end_date: null
                  percentage: 50
                  recurring: true
                  duration_period_count: null
                  duration_interval: 1
                  duration_interval_unit: day
                  allow_negative_balance: true
                  archived_at: null
                  conversion_limit: 100
                  stackable: false
                  compounding_strategy: compound
                  coupon_restrictions: []
              - coupon:
                  id: 888888
                  name: 25% coupon
                  code: 25PERCENT
                  description: 25 PERCENT OFF
                  amount_in_cents: null
                  product_family_id: 527890
                  created_at: '2016-10-21T17:02:08-04:00'
                  updated_at: '2016-10-21T17:06:11-04:00'
                  start_date: '2016-10-21T17:02:08-04:00'
                  end_date: null
                  percentage: 25
                  recurring: true
                  duration_period_count: null
                  duration_interval: 1
                  duration_interval_unit: day
                  allow_negative_balance: true
                  archived_at: null
                  conversion_limit: 100
                  stackable: false
                  compounding_strategy: compound
                  coupon_restrictions: []
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_productfamilies-productfamilyid-couponsjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /coupons/find.json:
    get:
      operationId: GET_coupons-find-json
      summary: Find Coupon
      tags:
        - Coupons
      description: |-
        ## Find Coupon

        You can search for a coupon via the API with the find method. By passing a code parameter, the find will attempt to locate a coupon that matches that code. If no coupon is found, a 404 is returned.

        If you have more than one product family and if the coupon you are trying to find does not belong to the first product family in your site, then you will need to specify (either in the url or as a query string param) the product family id.

        You can retrieve a coupon via the API with the show method. You must identify the coupon in this call by the id parameter that Chargify assigns. If instead you would like to find a coupon using a coupon code, see the Coupon Find method.

        ```
        https://<subdomain>.chargify.com/product_families/<product_family_id>/coupons/find.<format>?code=<coupon_code>
        ```

        **OR**

        ```
        https://<subdomain>.chargify.com/coupons/find.<format>?code=<coupon_code>&product_family_id=1
        ```
      parameters:
        - name: product_family_id
          in: query
          type: integer
        - name: code
          in: query
          type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/coupons-create-coupon-output-percentage'
          examples:
            application/json:
              coupon:
                id: 67
                name: Foo Bar
                code: YEPPER99934
                description: my cool coupon
                amount_in_cents: 10000
                product_family_id: 4
                created_at: '2017-11-08T10:01:15-05:00'
                updated_at: '2017-11-08T10:01:15-05:00'
                start_date: '2017-11-08T10:01:15-05:00'
                end_date: null
                percentage: null
                recurring: false
                duration_period_count: null
                duration_interval: null
                duration_interval_unit: null
                allow_negative_balance: false
                archived_at: null
                conversion_limit: null
                stackable: true
                compounding_strategy: compound
                coupon_restrictions: []
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_coupons-findjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/product_families/{product_family_id}/coupons/{coupon_id}.json':
    parameters:
      - name: product_family_id
        in: path
        required: true
        type: string
      - name: coupon_id
        in: path
        required: true
        type: string
    get:
      operationId: GET_coupons-coupon_id-format
      summary: Read Coupon
      tags:
        - Coupon
        - Coupons
      description: |-
        ## Read a Coupon

        You can retrieve the Coupon via the API with the Show method. You must identify the Coupon in this call by the ID parameter that Chargify assigns.
        If instead you would like to find a Coupon using a Coupon code, see the Coupon Find method.

        When fetching a coupon, if you have defined multiple currencies at the site level, you can optionally pass the `?currency_prices=true` query param to include an array of currency price data in the response.

        If the coupon is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
      parameters:
        - $ref: '#/parameters/trait:couponQueryString:date_field'
        - $ref: '#/parameters/trait:couponQueryString:start_date'
        - $ref: '#/parameters/trait:couponQueryString:end_date'
        - $ref: '#/parameters/trait:couponQueryString:start_datetime'
        - $ref: '#/parameters/trait:couponQueryString:end_datetime'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/coupons-create-coupon-output-percentage'
          examples:
            application/json:
              coupon:
                id: 67
                name: Foo Bar
                code: YEPPER99934
                description: my cool coupon
                amount_in_cents: null
                product_family_id: 4
                product_family_name: Billing Plans
                created_at: '2017-11-08T10:01:15-05:00'
                updated_at: '2017-11-08T10:01:15-05:00'
                start_date: '2017-11-08T10:01:15-05:00'
                end_date: null
                percentage: '33.3333'
                duration_period_count: null
                duration_interval: null
                duration_interval_unit: null
                allow_negative_balance: false
                archived_at: null
                conversion_limit: null
                stackable: true
                compounding_strategy: compound
                coupon_restrictions: []
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_coupons-coupon_id-format
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          statusCode: 200
    put:
      operationId: PUT_coupons-coupon_id-format
      summary: Update Coupon
      tags:
        - Coupon
        - Coupons
      description: |-
        ## Update Coupon

        You can update a Coupon via the API with a PUT request to the resource endpoint.

        You can restrict a coupon to only apply to specific products / components by optionally passing in hashes of `restricted_products` and/or `restricted_components` in the format:
        `{ "<product/component_id>": boolean_value }`
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/coupons-create-coupon-input-percentage'
            example:
              coupon:
                name: 15% off
                code: 15OFF
                description: 15% off for life
                percentage: '15'
                allow_negative_balance: 'false'
                recurring: 'false'
                end_date: '2012-08-29T12:00:00-04:00'
                product_family_id: '2'
                stackable: 'true'
                compounding_strategy: compound
              restricted_products:
                '1': true
              restricted_components:
                '1': true
                '2': false
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/coupons-create-coupon-output-percentage'
          examples:
            application/json:
              coupon:
                id: 67
                name: Foo Bar
                code: YEPPER99934
                description: my cool coupon
                amount_in_cents: 10000
                product_family_id: 4
                created_at: '2017-11-08T10:01:15-05:00'
                updated_at: '2017-11-08T10:01:15-05:00'
                start_date: '2017-11-08T10:01:15-05:00'
                end_date: null
                percentage: null
                recurring: false
                duration_period_count: null
                duration_interval: null
                duration_interval_unit: null
                allow_negative_balance: false
                archived_at: null
                conversion_limit: null
                stackable: true
                compounding_strategy: compound
                coupon_restrictions: []
      security:
        - <<api_key>>: []
      x-stoplight:
        id: PUT_coupons-coupon_id-format
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          statusCode: 200
    delete:
      operationId: DELETE_coupons-coupon_id-format
      summary: Archive Coupon
      tags:
        - Coupon
        - Coupons
      description: |-
        ## Archive a Coupon

        You can archive a Coupon via the API with the archive method.
        Archiving makes that Coupon unavailable for future use, but allows it to remain attached and functional on existing Subscriptions that are using it.
        The `archived_at` date and time will be assigned.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/coupons-create-coupon-output-percentage'
          examples:
            application/json:
              coupon:
                id: 67
                name: Foo Bar
                code: YEPPER99934
                description: my cool coupon
                amount_in_cents: 10000
                product_family_id: 4
                created_at: '2017-11-08T10:01:15-05:00'
                updated_at: '2017-11-08T10:01:15-05:00'
                start_date: '2017-11-08T10:01:15-05:00'
                end_date: null
                percentage: null
                recurring: false
                duration_period_count: null
                duration_interval: null
                duration_interval_unit: null
                allow_negative_balance: false
                archived_at: '2016-12-02T13:09:33-05:00'
                conversion_limit: null
                stackable: true
                compounding_strategy: compound
                coupon_restrictions: []
      security:
        - <<api_key>>: []
      x-stoplight:
        id: DELETE_coupons-coupon_id-format
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          statusCode: 200
  /coupons.json:
    get:
      operationId: GET_coupons-format
      summary: List Coupons in Default Product Family
      tags:
        - Coupon
        - incomplete
        - Coupons
      description: |-
        ## Read Coupons for the Default Product Family

        You can retrieve a list of coupons that belong to the default product family for a site via this method.

        The default product family is the one that was created first for the site, (with the lowest ID number,) that has not been archived.

        When fetching coupons, if you have defined multiple currencies at the site level, you can optionally pass the `?currency_prices=true` query param to include an array of currency price data in the response.

        If the coupon is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
      parameters:
        - $ref: '#/parameters/trait:pagination30:page'
        - $ref: '#/parameters/trait:pagination30:per_page'
        - $ref: '#/parameters/trait:couponQueryString:date_field'
        - $ref: '#/parameters/trait:couponQueryString:start_date'
        - $ref: '#/parameters/trait:couponQueryString:end_date'
        - $ref: '#/parameters/trait:couponQueryString:start_datetime'
        - $ref: '#/parameters/trait:couponQueryString:end_datetime'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/coupons-list-coupons-for-a-site-output'
          examples:
            application/json:
              - coupon:
                  id: 999999
                  name: 50% coupon
                  code: 50PERCENT
                  description: 50 PERCENT OFF
                  amount_in_cents: null
                  product_family_id: 527890
                  created_at: '2016-10-21T17:02:08-04:00'
                  updated_at: '2016-10-21T17:06:11-04:00'
                  start_date: '2016-10-21T17:02:08-04:00'
                  end_date: null
                  percentage: 50
                  recurring: true
                  duration_period_count: null
                  duration_interval: 1
                  duration_interval_unit: day
                  allow_negative_balance: true
                  archived_at: null
                  conversion_limit: 100
                  stackable: false
                  compounding_strategy: compound
                  coupon_restrictions: []
              - coupon:
                  id: 123456
                  name: 100% coupon
                  code: 100PERCENT
                  description: 100 PERCENT OFF
                  amount_in_cents: null
                  product_family_id: 527890
                  created_at: '2016-10-21T17:02:08-04:00'
                  updated_at: '2016-10-21T17:06:11-04:00'
                  start_date: '2016-10-21T17:02:08-04:00'
                  end_date: null
                  percentage: 50
                  recurring: true
                  duration_period_count: null
                  duration_interval: 1
                  duration_interval_unit: day
                  allow_negative_balance: true
                  archived_at: null
                  conversion_limit: 100
                  stackable: false
                  compounding_strategy: compound
                  coupon_restrictions: []
              - coupon:
                  id: 888888
                  name: 25% coupon
                  code: 25PERCENT
                  description: 25 PERCENT OFF
                  amount_in_cents: null
                  product_family_id: 527890
                  created_at: '2016-10-21T17:02:08-04:00'
                  updated_at: '2016-10-21T17:06:11-04:00'
                  start_date: '2016-10-21T17:02:08-04:00'
                  end_date: null
                  percentage: 25
                  recurring: true
                  duration_period_count: null
                  duration_interval: 1
                  duration_interval_unit: day
                  allow_negative_balance: true
                  archived_at: null
                  conversion_limit: 100
                  stackable: false
                  compounding_strategy: compound
                  coupon_restrictions: []
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_coupons-format
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          statusCode: 200
  '/product_families/{product_family_id}/coupons/{coupon_id}/usage.json':
    parameters:
      - name: product_family_id
        in: path
        required: true
        type: string
      - name: coupon_id
        in: path
        required: true
        type: string
    get:
      operationId: GET_product_families-product_family_id-coupons-coupon_id-usage-json
      summary: List Coupon Usages
      tags:
        - Coupons
      description: |-
        ## Read Coupon Usage for a Site

        This request will provide details about the coupon usage as an array of data hashes, one per product.
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/coupons-coupon-usage-output'
          examples:
            application/json:
              - name: No cost product
                id: 3903594
                signups: 0
                savings: 0
                savings_in_cents: 0
                revenue: 0
                revenue_in_cents: 0
              - name: Product that expires
                id: 3853680
                signups: 0
                savings: 0
                savings_in_cents: 0
                revenue: 0
                revenue_in_cents: 0
              - name: Trial Product
                id: 3861800
                signups: 1
                savings: 30
                savings_in_cents: 3000
                revenue: 20
                revenue_in_cents: 2000
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_productfamilies-productfamilyid-coupons-couponid-usagejson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /coupons/validate.json:
    get:
      operationId: GET_coupons-validate-format
      summary: Validate Coupon
      tags:
        - Coupon
        - incomplete
        - Coupons
      description: |-
        ## Validate a Coupon

        You can verify if a specific coupon code is valid using the `validate` method. This method is useful for validating coupon codes that are entered by a customer. If the coupon is found and is valid, the coupon will be returned with a 200 status code.

        If the coupon is invalid, the status code will be 404 and the response will say why it is invalid. If the coupon is valid, the status code will be 200 and the coupon will be returned. The following reasons for invalidity are supported:

        + Coupon not found
        + Coupon is invalid
        + Coupon expired

        If you have more than one product family and if the coupon you are validating does not belong to the first product family in your site, then you will need to specify the product family, either in the url or as a query string param. This can be done by supplying the id or the handle in the `handle:my-family` format.

        Eg.

        ```
        https://<subdomain>.chargify.com/product_families/handle:<product_family_handle>/coupons/validate.<format>?code=<coupon_code>
        ```

        Or:

        ```
        https://<subdomain>.chargify.com/coupons/validate.<format>?code=<coupon_code>&product_family_id=<id>
        ```
      parameters:
        - name: code
          in: query
          description: The Coupon Code.
          type: string
        - name: product_family_id
          in: query
          description: ''
          type: number
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/coupons-create-coupon-output-percentage'
          examples:
            application/json:
              coupon:
                id: 66
                name: Foo Bar
                code: YEPPER9993
                description: my cool coupon
                amount_in_cents: 10000
                product_family_id: 4
                created_at: '2017-11-07T14:51:52-05:00'
                updated_at: '2017-11-07T15:14:24-05:00'
                start_date: '2017-11-07T14:51:52-05:00'
                end_date: null
                percentage: null
                recurring: false
                duration_period_count: null
                duration_interval: null
                duration_interval_unit: null
                allow_negative_balance: false
                archived_at: null
                conversion_limit: null
                stackable: true
                compounding_strategy: full-price
                coupon_restrictions: []
        '404':
          description: Not Found
          examples:
            application/json:
              errors: Coupon code could not be found.
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_coupons-validate-format
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          statusCode: 200
  '/coupon/{coupon_id}/currency_prices.json':
    parameters:
      - name: coupon_id
        in: path
        required: true
        type: string
    put:
      operationId: PUT_coupon-coupon_id-currency_prices-json
      summary: Create / Update Currency Prices
      tags:
        - Coupons
      description: |-
        This endpoint allows you to create and/or update currency prices for an existing coupon. Multiple prices can be created or updated in a single request but each of the currencies must be defined on the site level already and the coupon must be an amount-based coupon, not percentage.

        Currency pricing for coupons must mirror the setup of the primary coupon pricing - if the primary coupon is percentage based, you will not be able to define pricing in non-primary currencies.
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              currency_prices:
                type: array
                items:
                  type: object
                  properties:
                    currency:
                      type: string
                      description: ISO code for the site defined currency.
                    price:
                      type: integer
                      description: Price for the given currency.
                  required:
                    - currency
                    - price
            required:
              - currency_prices
            example:
              currency_prices:
                - currency: EUR
                  price: 10
                - currency: GBP
                  price: 9
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/coupon-currency-price'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: PUT_coupon-couponid-currencypricesjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/coupons/{coupon_id}/codes.json':
    parameters:
      - name: coupon_id
        in: path
        required: true
        type: string
    post:
      operationId: POST_coupons-coupon_id-codes-json
      summary: Create Coupon Subcodes
      tags:
        - Coupons
      description: |-
        ## Coupon Subcodes Intro

        Coupon Subcodes allow you to create a set of unique codes that allow you to expand the use of one coupon.

        For example:

        Master Coupon Code: 

        + SPRING2020

        Coupon Subcodes: 

        + SPRING90210
        + DP80302
        + SPRINGBALTIMORE

        Coupon subcodes can be administered in the Admin Interface or via the API.

        When creating a coupon subcode, you must specify a coupon to attach it to using the coupon_id. Valid coupon subcodes are all capital letters, contain only letters and numbers, and do not have any spaces. Lowercase letters will be capitalized before the subcode is created.

        ## Coupon Subcodes Documentation

        Full documentation on how to create coupon subcodes in the Chargify UI can be located [here](https://help.chargify.com/products/product-coupons.html#coupon-codes).

        Additionally, for documentation on how to apply a coupon to a Subscription within the Chargify UI, please see our documentation [here](https://help.chargify.com/subscriptions/subscription-summary.html#coupon).

        ## Create Coupon Subcode

        This request allows you to create specific subcodes underneath an existing coupon code.

        *Note*: If you are using any of the allowed special characters ("%", "@", "+", "-", "_", and "."), you must encode them for use in the URL.

            % to %25
            @ to %40
            + to %2B
            - to %2D
            _ to %5F
            . to %2E
            
        So, if the coupon subcode is `20%OFF`, the URL to delete this coupon subcode would be: `https://<subdomain>.chargify.com/coupons/567/codes/20%25OFF.<format>`
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/coupon-subcodes-create-a-coupon-subcode'
            example:
              codes:
                - BALTIMOREFALL
                - ORLANDOFALL
                - DETROITFALL
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/coupons-subcodes-create-a-coupon-subcode-output'
          examples:
            application/json:
              created_codes:
                - BALTIMOREFALL
                - ORLANDOFALL
                - DETROITFALL
              duplicate_codes: []
              invalid_codes: []
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_coupons-couponid-codesjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    get:
      operationId: GET_coupons-coupon_id-codes-json
      summary: List Coupon Subcodes
      tags:
        - Coupons
      description: |-
        ## List Coupon Subcodes for a Site

        This request allows you to request the subcodes that are attached to a coupon.
      parameters:
        - $ref: '#/parameters/trait:pagination20:page'
        - $ref: '#/parameters/trait:pagination20:per_page'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/coupons-subcodes-retrieve-coupon-subcodes-output'
          examples:
            application/json:
              codes:
                - 3JU6PR
                - 9RO6MP
                - 8OG1VV
                - 5FL7VV
                - 2SV8XK
                - 4LW8LH
                - 3VL4GZ
                - 9UI9XO
                - 0LZ0CC
                - 8XI9JV
                - 9UV5YE
                - 3UI4GX
                - 6SL5ST
                - 9WC8IJ
                - 2KA3PZ
                - 7WR1VR
                - 3VY7MN
                - 6KC3KB
                - 7DF7YT
                - 9FH1ED
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_coupons-couponid-codesjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    put:
      operationId: PUT_coupons-coupon_id-codes-format
      summary: Update Coupon Subcodes
      tags:
        - Coupon Subcode
        - incomplete
        - Coupons
      description: |-
        ## Update Coupon Subcodes

        You can update the subcodes for the given Coupon via the API with a PUT request to the resource endpoint.
        Send an array of new coupon subcodes.

        **Note**: All current subcodes for that Coupon will be deleted first, and replaced with the list of subcodes sent to this endpoint.
        The response will contain:

        + The created subcodes,

        + Subcodes that were not created because they already exist,

        + Any subcodes not created because they are invalid.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/coupon-subcodes-create-a-coupon-subcode'
            example:
              codes:
                - AAAA
                - BBBB
                - CCCC
        - $ref: '#/parameters/trait:pagination20:page'
        - $ref: '#/parameters/trait:pagination20:per_page'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/coupons-subcodes-create-a-coupon-subcode-output'
          examples:
            application/json:
              codes:
                - AAAA
                - BBBB
                - CCCC
      security:
        - <<api_key>>: []
      x-stoplight:
        id: PUT_coupons-coupon_id-codes-format
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          statusCode: 200
  '/coupons/{coupon_id}/codes/{subcode}.json':
    parameters:
      - name: coupon_id
        in: path
        description: The Coupon ID.
        required: true
        type: number
      - name: subcode
        in: path
        description: The Subcode.
        required: true
        type: number
    delete:
      operationId: DELETE_coupons-coupon_id-codes-subcode-format
      summary: Delete Coupon Subcode
      tags:
        - Coupon Subcode
        - incomplete
        - Coupons
      description: |-
        ## Delete the Coupon Subcode

        If the Coupon subcode is successfully removed, a "200" response code will be returned. Otherwise, a "404" error will be returned.

        ## Example

        Given a coupon with an ID of 567, and a coupon subcode of 20OFF, the URL to `DELETE` this coupon subcode would be: 

        ```
        http://subdomain.chargify.com/coupons/567/codes/20OFF.<format>
        ```

        Note: If you are using any of the allowed special characters (“%”, “@”, “+”, “-”, “_”, and “.”), you must encode them for use in the URL.

        | Special character | Encoding |
        |-------------------|----------|
        | %                 | %25      |
        | @                 | %40      |
        | +                 | %2B      |
        | –                 | %2D      |
        | _                 | %5F      |
        | .                 | %2E      |

        ## Percent Encoding Example

        Or if the coupon subcode is 20%OFF, the URL to delete this coupon subcode would be: @https://<subdomain>.chargify.com/coupons/567/codes/20%25OFF.<format>
      responses:
        '404':
          description: Not Found
      security:
        - <<api_key>>: []
      x-stoplight:
        id: DELETE_coupons-coupon_id-codes-subcode-format
        beforeScript: null
        afterScript: null
        public: true
        mock:
          statusCode: 200
          enabled: false
  '/{resource_type}/metafields.json':
    parameters:
      - name: resource_type
        in: path
        description: ''
        required: true
        type: string
        enum:
          - subscriptions
          - customers
    post:
      operationId: POST_resource_type-metafields-json
      summary: Create Metafields
      tags:
        - Custom Fields
      description: |-
        ## Custom Fields: Metafields Intro

        **Chargify refers to Custom Fields in the API documentation as metafields and metadata.**

        + **Metafield is the custom field**
        + **Metadata is the data populating the custom field.**

        Chargify Metafields are used to add meaningful attributes to subscription and customer resources.

        Metafield are the place where you will set up your resource to accept additional data. It is scoped to the site instead of a specific customer or subscription. Think of it as the key, and Metadata as the value on every record.

        ## Metafields Documentation

        Within the Chargify UI, metadata and metafields are grouped together under the umbrella of "Custom Fields." All of our UI-based documentation that references custom fields will not cite the terminology metafields or metadata. 

        Full documentation on how to create Custom Fields in the Chargify UI can be located [here](https://help.chargify.com/custom-fields/custom-fields-intro.html).

        For additional documentation on how to record data within custom fields, please see our subscription-based documentation [here.](https://help.chargify.com/subscriptions/subscription-summary.html#custom-fields)

        ## Metafields vs Metadata 

        Metadata is the information that populates the metafield.

        ## Metafields "On-the-Fly"

        It is possible to create Metafields “on the fly” when you create your Metadata – if a non-existant name is passed when creating Metadata, a Metafield for that key will be automatically created. The Metafield API, however, gives you more control over your “keys”.

        ## Metafield Limitations

        Each site is limited to 100 unique Metafields (i.e. keys, or names) per resource. This means you can have 100 Metafields for Subscription and another 100 for Customer.

        ## Metafields Scope

        The scope field has four acceptable attributes, which dictate where metafields will appear:

        + portal
        + csv
        + invoices
        + statements
         
        If configuring metafields in the Admin UI or via the API, be careful sending updates to metafields with the scope attribute – if a partial update is sent it will overwrite the current configuration.

        ## CSV Metafields

        Values of ```1``` (include) or ```0``` (exclude) can be used to include or exclude in csv exports.

        ```“csv”: “1”```

        ## Statement Metafields

        Values of ```1``` (include) or ```0``` (exclude) can be used to include or exclude in statments.

        ```“statements”: “1”```

        ### Invoice Metafields

        Values of ```1``` (include) or ```0``` (exclude) can be used to include or exclude on invoices.

        ```“invoices”: “1”```

        ### Billing Portal Metafields

        Values of ```1``` (include) or ```0``` (exclude) can be used to include or exclude on invoices.

        ```"portal": "1"```

        ## Metafield Types

        Metafields can have three different types defined by the `input_type` attribute:

        + text (the default)
        + dropdown
        + radio

        The `input_type` indicates how data should be added to the metafield. For example, a `text` type is just a string, so a given metafield of this type can have any value attached. On the other hand, `dropdown` and `radio` have a set of allowed values that can be input, and appear differently on a Public Signup Page.

        ## Create Metafields

        Use the following method to create metafields for your Site. Metafields can be populated with metadata after the fact.

        ## Create Multiple Metafields 

        In order to create multiple metafields in one request, use the following JSON format:

        ```
        {
            "metafields": [
              {"name": "Color"},
              {"name": "Brand"}
            ]
          }
        ```

        ## Create a Dropdown Metafield

        The default `input_type` for a custom field is `text`. Here's an example request that creates a metafield with `dropdown` options defined in an `enum` array:

        ```
        {
          "metafields": {
            "name": "Dropdown field",
            "input_type": "dropdown",
            "enum": [
                "option 1",
                "option 2"
              ]
          }
        }
        ```
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/create-metafields'
            example:
              metafields:
                name: Color
                scope:
                  csv: '0'
                  invoices: '1'
                  statements: '1'
                  portal: '0'
                input_type: radio
                enum:
                  - option 1
                  - option 2
        - $ref: '#/parameters/trait:metafieldsNameRequiredCurrentNameOptional:name'
        - $ref: '#/parameters/trait:metafieldsNameRequiredCurrentNameOptional:current_name'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/metafield'
          examples:
            application/json:
              - name: Color
                scope:
                  hosted: []
                  csv: '0'
                  statements: '0'
                  invoices: '0'
                  portal: '0'
                data_count: 0
                input_type: text
                enum: null
              - name: Brand
                scope:
                  hosted: []
                  csv: '0'
                  statements: '0'
                  invoices: '0'
                  portal: '0'
                data_count: 0
                input_type: text
                enum: null
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_resourcetype-metafieldsjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    get:
      operationId: GET_resource_type-metafields-json
      summary: List Metafields
      tags:
        - Custom Fields
      description: |-
        ## Read Metafields

        This endpoint lists metafields associated with a Site. The metafield description and usage is contained in the response.
      parameters:
        - $ref: '#/parameters/trait:metafieldsNameOptional:name'
        - $ref: '#/parameters/trait:pagination20:page'
        - $ref: '#/parameters/trait:pagination20:per_page'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/paginated-metafields'
          examples:
            application/json:
              total_count: 1
              current_page: 1
              total_pages: 1
              per_page: 20
              metafields:
                - name: Pants
                  scope:
                    hosted: []
                    csv: '0'
                    statements: '0'
                    invoices: '0'
                    portal: '0'
                  data_count: 1
                  input_type: text
                  enum: null
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_resourcetype-metafieldsjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    put:
      operationId: PUT_resource_type-metafields-json
      summary: Update Metafields
      tags:
        - Custom Fields
      description: |-
        ## Update Metafields

        Use the following method to update metafields for your Site. Metafields can be populated with metadata after the fact.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/update-metafields'
            example:
              metafields:
                current_name: shirt
                name: new-shirt
                scope:
                  hosted:
                    - '1'
                    - '1'
                    - '1'
                  csv: '1'
                  invoices: '1'
                  statements: '1'
                  portal: '0'
        - $ref: '#/parameters/trait:metafieldsNameRequired:name'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/metafield'
          examples:
            application/json:
              - name: Shirts
                scope:
                  hosted: []
                  csv: '0'
                  statements: '0'
                  invoices: '0'
                  portal: '0'
                data_count: 0
                input_type: text
                enum: null
      security:
        - <<api_key>>: []
      x-stoplight:
        id: PUT_resourcetype-metafieldsjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    delete:
      operationId: DELETE_resource_type-metafields-json
      summary: Delete Metafields
      tags:
        - Custom Fields
      description: |-
        ## Delete Metafields

        Use the following method to delete a metafield. This will remove the metafield from the Site. 

        Additionally, this will remove the metafield and associated metadata with all Subscriptions on the Site.

        ## Example

        If you wanted to delete the metafield for customers named strength you would request:

        ```https://my-subdomain.chargify.com/customers/metafields.json?name=strength```
      parameters:
        - $ref: '#/parameters/trait:metafieldsNameRequired:name'
      responses:
        '200':
          description: ''
        '404':
          description: ''
      security:
        - <<api_key>>: []
      x-stoplight:
        id: DELETE_resourcetype-metafieldsjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/{resource_type}/{resource_id}/metadata.json':
    parameters:
      - name: resource_type
        in: path
        required: true
        type: string
        enum:
          - customers
          - subscriptions
      - name: resource_id
        in: path
        required: true
        type: string
    post:
      operationId: POST_resource_type-resource_id-metadata-json
      summary: Create Metadata
      tags:
        - Custom Fields
      description: |-
        ## Custom Fields: Metadata Intro

        **Chargify refers to Custom Fields in the API documentation as metafields and metadata.**

        + **Metafield is the custom field**
        + **Metadata is the data populating the custom field.**


        Chargify Metadata is used to add your own meaningful values to subscription or customer records.
        Metadata is associated to a customer or subscription, and corresponds to a Metafield. When creating a new metadata object for a given record, if the metafield is not present it will be created.

        ## Metadata Documentation

        Within the Chargify UI, metadata and metafields are grouped together under the umbrella of "Custom Fields." All of our UI-based documentation that references custom fields will not cite the terminology metafields or metadata. 

        Full documentation on how to create Custom Fields in the Chargify UI can be located [here](https://help.chargify.com/custom-fields/custom-fields-intro.html).

        For additional documentation on how to record data within custom fields, please see our subscription-based documentation [here.](https://help.chargify.com/subscriptions/subscription-summary.html#custom-fields)

        ## Metadata versus Metafields

        Metadata is the information that populates the metafield.

        ## Metadata limits

        Metadata values are limited to 2kB in size. Additonally, there are limits on the number of unique “names” available per resource. See [Metafields documentation](#docTextSection:BDXuRKX5n8K4T6Jsh).

        ## Create Metadata

        This method will create a metafield for the site on the fly if it does not already exist, and populate the metadata value.

        ### Subscription or Customer Resource

        Please pay special attention to the resource  you use when creating metadata.
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              metadata:
                type: array
                items:
                  $ref: '#/definitions/metadata'
            example:
              metadata:
                - name: Color
                  value: Blue
                - name: Something
                  value: Useful
        - $ref: '#/parameters/trait:metadataValue:value'
      responses:
        default:
          description: ''
          schema: {}
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_resourcetype-resourceid-metadatajson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    get:
      operationId: GET_resource_type-resource_id-metadata-json
      summary: List Metadata for Resource
      tags:
        - Custom Fields
      description: |-
        ## Read Metadata for a Specific Resource

        This request will list all of the metadata belonging to a particular resource (ie. subscription, customer) that is specified.

        ## Metadata Data

        This endpoint will also display the current stats of your metadata to use as a tool for pagination.
      parameters:
        - $ref: '#/parameters/trait:pagination20:page'
        - $ref: '#/parameters/trait:pagination20:per_page'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/paginated-metadata'
          examples:
            application/json:
              total_count: 2
              current_page: 1
              total_pages: 1
              per_page: 20
              metadata:
                - value: The quick brown fox
                  resource_id: 15479934
                  name: Comments
                - value: L
                  resource_id: 15479934
                  name: T-Shirt Size
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_resourcetype-resourceid-metadatajson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    put:
      operationId: PUT_resource_type-resource_id-metadata-json
      summary: Update Metadata
      tags:
        - Custom Fields
      description: |-
        ## Update Metadata

        This method allows you to update the existing metadata associated with a subscription or customer. 

        ## URL Construction

        Please note that as you replace the `resource` portion of the URL, use one of the following formations

        ```
        /subscriptions/{subscription_id}/metadata.{format}
        ```

        OR

        ```
        /customers/{customer_id}/metadata.{format}
        ```
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              metadata:
                type: object
                properties:
                  current_name:
                    type: string
                  name:
                    type: string
                  value:
                    type: string
            example:
              metadata:
                current_name: Color
                name: Shirt Color
                value: Blue
        - $ref: '#/parameters/trait:metadataValue:value'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/metadata'
          examples:
            application/json:
              - value: Blue
                resource_id: 15479934
                name: Shirt Color
      security:
        - <<api_key>>: []
      x-stoplight:
        id: PUT_resourcetype-resourceid-metadatajson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
    delete:
      operationId: DELETE_resource_type-resource_id-metadata-json
      summary: Delete Metadata
      tags:
        - Custom Fields
      description: |-
        ## Delete Metadata

        This method removes the metadata from the subscriber/customer cited.

        ## Query String Usage

        For instance if you wanted to delete the metadata for customer 99 named weight you would request:

        ```
        https://acme.chargify.com/customers/99/metadata.json?name=weight
        ```

        If you want to delete multiple metadata fields for a customer 99 named: `weight` and `age` you wrould request:
        ```
        https://acme.chargify.com/customers/99/metadata.json?names[]=weight&names[]=age
        ```


        ## Successful Response

        For a success, there will be a code `200` and the plain text response `true`.

        ## Unsuccessful Response

        When a failed response is encountered, you will receive a `404` response and the plain text response of `true`.
      parameters:
        - name: name
          in: query
          type: string
        - name: 'names[]'
          in: query
          type: array
          items:
            type: string
      responses:
        default:
          description: ''
          schema: {}
      security:
        - <<api_key>>: []
      x-stoplight:
        id: DELETE_resourcetype-resourceid-metadatajson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/{resource_type}/metadata.json':
    parameters:
      - name: resource_type
        in: path
        required: true
        type: string
        enum:
          - subscriptions
          - customers
    get:
      operationId: GET_resource_type-metadata-json
      summary: List Metadata for Resource Type
      tags:
        - Custom Fields
      description: |-
        ## Read Metadata by Resource

        This method will provide you information on usage of metadata across your selected resource (ie. subscriptions, customers)

        ## Metadata Data

        This endpoint will also display the current stats of your metadata to use as a tool for pagination.

        ### Metadata for multiple records

        `https://acme.chargify.com/subscriptions/metadata.json?resource_ids[]=1&resource_ids[]=2`

        ## Read Metadata for a Site 

        This endpoint will list the number of pages of metadata information that are contained within a site.
      parameters:
        - name: 'resource_ids[]'
          in: query
          type: array
          items:
            type: string
        - $ref: '#/parameters/trait:pagination20:page'
        - $ref: '#/parameters/trait:pagination20:per_page'
        - $ref: '#/parameters/trait:metadataQueryString:date_field'
        - $ref: '#/parameters/trait:metadataQueryString:start_date'
        - $ref: '#/parameters/trait:metadataQueryString:end_date'
        - $ref: '#/parameters/trait:metadataQueryString:start_datetime'
        - $ref: '#/parameters/trait:metadataQueryString:end_datetime'
        - $ref: '#/parameters/trait:metadataQueryString:with_deleted'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/paginated-metadata'
          examples:
            application/json:
              total_count: 2
              current_page: 1
              total_pages: 1
              per_page: 20
              metadata:
                - value: The quick brown fox
                  resource_id: 15479934
                  name: Comments
                - value: L
                  resource_id: 15479934
                  name: T-Shirt Size
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_resourcetype-metadatajson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  /customers.json:
    post:
      operationId: POST_customers-format
      summary: Create Customer
      tags:
        - Customer
        - Customers
      description: |-
        ## Customers Intro

        You may create a new Customer at any time, or you may create a Customer at the same time you create a Subscription. The only validation restriction is that you may only create one customer for a given reference value. 

        If provided, the `reference` value must be unique. It represents a unique identifier for the customer from your own app, i.e. the customer’s ID. This allows you to retrieve a given customer via a piece of shared information. Alternatively, you may choose to leave `reference` blank, and store Chargify’s unique ID for the customer, which is in the `id` attribute.

        Full documentation on how to locate, create and edit Customers in the Chargify UI can be located [here](https://help.chargify.com/customers/customers-intro.html).

        ## Create Customer

        You can create a new Customer at any time, or you may create a Customer at the same time you create a Subscription. The only validation restriction is that you may only create one Customer for a given `reference` value. If provided, the `reference` value must be unique. It represents a unique identifier for the Customer from your own app, i.e. the Customer’s ID. This allows you to retrieve a given Customer via a piece of shared information. Alternatively, you may choose to leave `reference` blank, and store Chargify’s unique ID for the Customer, which is in the `id` attribute.

        Only those attributes not marked as "read only" may be set via POST (create) or PUT (update) operations.

        ## Required Country Format

        Chargify requires that you use the ISO Standard Country codes when formatting country attribute of the customer.

        Countries should be formatted as 2 characters. For more information, please see the following wikipedia article on [ISO_3166-1.](http://en.wikipedia.org/wiki/ISO_3166-1#Current_codes)

        ## Required State Format

        Chargify requires that you use the ISO Standard State codes when formatting state attribute of the customer.

        + US States (2 characters): [ISO_3166-2](https://en.wikipedia.org/wiki/ISO_3166-2:US)

        + States Outside the US (2-3 characters): To find the correct state codes outside of the US, please go to [ISO_3166-1](http://en.wikipedia.org/wiki/ISO_3166-1#Current_codes) and click on the link in the “ISO 3166-2 codes” column next to country you wish to populate.


        ## Locale

        Chargify allows you to attribute a language/region to your customer to deliver invoices in any required language.
        For more: [Customer Locale](https://help.chargify.com/settings/multi-lingual-invoices.html#customer-locale)
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              customer:
                type: object
                properties:
                  first_name:
                    type: string
                  last_name:
                    type: string
                  email:
                    type: string
                  cc_emails:
                    type: string
                  organization:
                    type: string
                  reference:
                    type: string
                  address:
                    type: string
                  address2:
                    type: string
                  city:
                    type: string
                  state:
                    type: string
                  zip:
                    type: string
                  country:
                    type: string
                  phone:
                    type: string
                  locale:
                    type: string
                    description: Set a specific language on a customer record.
            example:
              customer:
                first_name: Martha
                last_name: Washington
                email: martha@example.com
                cc_emails: george@example.com
                organization: 'ABC, Inc.'
                reference: '1234567890'
                address: 123 Main Street
                address2: Unit 10
                city: Anytown
                state: MA
                zip: '02120'
                country: US
                phone: 555-555-1212
                locale: es-MX
      responses:
        '201':
          description: Created
          schema:
            type: object
            properties:
              customer:
                $ref: '#/definitions/customer'
          examples:
            application/json:
              customer:
                first_name: Cathryn
                last_name: Parisian
                email: Stella.McLaughlin6@example.net
                cc_emails: null
                organization: Greenholt - Oberbrunner
                reference: null
                id: 76
                created_at: '2021-03-29T07:47:00-04:00'
                updated_at: '2021-03-29T07:47:00-04:00'
                address: 739 Stephon Bypass
                address_2: Apt. 386
                city: Sedrickchester
                state: KY
                state_name: Kentucky
                zip: 46979-7719
                country: US
                country_name: United States
                phone: 230-934-3685
                verified: false
                portal_customer_created_at: null
                portal_invite_last_sent_at: null
                portal_invite_last_accepted_at: null
                tax_exempt: false
                vat_number: null
                parent_id: null
                locale: en-US
        '422':
          description: ''
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: string
          examples:
            application/json:
              errors:
                - 'First name: cannot be blank.'
                - 'Last name: cannot be blank.'
                - 'Email address: cannot be blank.'
      security:
        - <<api_key>>: []
      x-stoplight:
        id: POST_customers-format
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          statusCode: 200
    get:
      operationId: GET_customers-json
      summary: Find Customer
      tags:
        - Customers
      description: |-
        ## Search for Customer

        Use the search feature to retrieve a single or group of customers. 

        Common use cases are:

        + Search by email
        + Search by Chargify ID
        + Search by Reference (Your App)
        + Search by Organization

        If multiple customers meet the criteria for the search string, please expect an array.
      parameters:
        - $ref: '#/parameters/trait:searchString:q'
        - $ref: '#/parameters/trait:pagination50:page'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              type: object
              properties:
                '':
                  $ref: '#/definitions/customer'
          examples:
            application/json:
              - customer:
                  first_name: Amelia
                  last_name: Example
                  email: amelia@example.com
                  cc_emails: 'john@example.com, joe@example.com'
                  organization: Acme
                  reference: JQPUBLIC
                  id: 14399371
                  created_at: '2016-10-24T16:20:12-04:00'
                  updated_at: '2016-10-26T13:25:33-04:00'
                  address: 123 Anywhere Street
                  address_2: ''
                  city: Anywhere
                  state: MA
                  zip: '02120'
                  country: US
                  phone: 555-555-1212
                  verified: false
                  portal_customer_created_at: null
                  portal_invite_last_sent_at: null
                  portal_invite_last_accepted_at: null
                  tax_exempt: false
                  vat_number: 012345678
                  parent_id: 14585723
              - customer:
                  first_name: Matt
                  last_name: Example
                  email: matt@example.com
                  cc_emails: 'john@example.com, sue@example.com'
                  organization: Acme
                  reference: '1234'
                  id: 14585723
                  created_at: '2016-11-04T17:08:31-04:00'
                  updated_at: '2016-12-02T18:03:36-05:00'
                  address: ''
                  address_2: ''
                  city: ''
                  state: ''
                  zip: ''
                  country: ''
                  phone: ''
                  verified: false
                  portal_customer_created_at: '2016-11-04T17:08:34-04:00'
                  portal_invite_last_sent_at: '2016-11-04T17:08:34-04:00'
                  portal_invite_last_accepted_at: null
                  tax_exempt: false
                  vat_number: 012345678
                  parent_id: null
              - customer:
                  first_name: John
                  last_name: Doe
                  email: john.doe@example.com
                  cc_emails: 'john@example.com, sue@example.com'
                  organization: Acme Widgets
                  reference: '123'
                  id: 14731081
                  created_at: '2016-11-15T15:33:44-05:00'
                  updated_at: '2016-11-15T15:33:45-05:00'
                  address: null
                  address_2: null
                  city: null
                  state: null
                  zip: null
                  country: null
                  phone: null
                  verified: false
                  portal_customer_created_at: '2016-11-15T15:33:45-05:00'
                  portal_invite_last_sent_at: '2016-11-15T15:33:45-05:00'
                  portal_invite_last_accepted_at: null
                  tax_exempt: false
                  vat_number: 012345678
                  parent_id: 123
              - customer:
                  first_name: Joe
                  last_name: Blow
                  email: joe@example.com
                  cc_emails: 'john@example.com, sue@example.com'
                  organization: Acme
                  reference: ABC123
                  id: 14943291
                  created_at: '2016-12-02T15:59:06-05:00'
                  updated_at: '2016-12-02T18:03:17-05:00'
                  address: ''
                  address_2: ''
                  city: ''
                  state: ''
                  zip: ''
                  country: ''
                  phone: ''
                  verified: false
                  portal_customer_created_at: '2016-12-02T15:59:09-05:00'
                  portal_invite_last_sent_at: '2016-12-02T15:59:09-05:00'
                  portal_invite_last_accepted_at: null
                  tax_exempt: false
                  vat_number: 012345678
                  parent_id: null
      security:
        - <<api_key>>: []
      x-stoplight:
        id: GET_customersjson
        beforeScript: null
        afterScript: null
        public: true
        mock:
          enabled: false
          dynamic: false
          statusCode: 200
  '/customers/{id}.json':
    parameters:
      - name: id
        in: path
        description: The ID of a Customer.
        required: true
        type: number
    get:
      operationId: GET_customers-id-format
      summary: Read Customer
      tags:
        - Customer
        - incomplete
        - Customers
      description: |-
        ## Read Customer Data

        This method allows to retrieve the Customer properties by Chargify-generated Customer ID.
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              customer:
                $ref: '#/definitions/customer'
          examples:
            application/json:
              customer:
                first_name: Martha
                last_name: Washington
                email: martha@example.com
                cc_emails: 'john@example.com, sue@example.com'
                organization: null
                reference: null
                id: 14967442
                